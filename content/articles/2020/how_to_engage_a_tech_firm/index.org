#+title: How to think about building software
#+subtitle: Be a Good Client
#+tags[]: overview
#+date: 2020-01-08
#+draft: true

* Who is this for?
* What is software?
** Like building a house
*** Similarities
- Start with a blue print
- General contractors hide a lot of complexity of managing specialists for you
- Always over budget and over time
*** Not at all the same
- Adding capital will in general increase asset value; software easily goes to zero
- No tangible asset -- it's often between to throw everything out in software
** Like writing
*** Similarities
- About ideas and concepts, lot of copywriting
- You spend most of the time debugging/editing 
- Highly iterative
- Seems like it should be easier until you try
*** Not at all the same
- Lot of mathematical constraints
- Extensive infrastructure to get started
- Everyone involved in software has poor communication skills
** Like a making a movie
*** Similarities
- Hit based where few get all rewards
- No one knows anything
- Once something is successful, massive copy cats
- Massive marketing is necessary, but not sufficient
- Adapted from source material, often unrecognizably
- Tension between suits and creatives destroy things
*** Not at all the same
- Staffing requirements for software continues to increase over the life cycle
- No "opening box office" concept, just keeps going forever
- A movie is more of a "thing" than software, which is more like an ecology
* Engineering is about tradeoffs
There is no right answer. Any choice has good and bad things about it.  In order to make the right choice you need to understand the context of where you are operating.
* Deciding what to build
People have a poor intuition on how complicated software can become.  The tendency is to think in large general terms and build "it" right the first time, not taking into the account that most of the work is to actually figure out what "it" is.  You can easily spend a huge amount of effort, with no actual results, trying to solve a problem that you don't really understand with the wrong level of ambition.  Sometimes a bicycle is a better solution than building both a factory that builds a car and at the same time the infrastructure needed to build and pave roads.

First thing is to figure out how to keep it as simple as possible.  You can always change it later, and it's cheaper to build something once you really know what you are building.  Never build something that you don't know if you'll really need.

** Life cycle
Find that Kent Beck article

https://www.facebook.com/notes/kent-beck/the-product-development-triathlon/1215075478525314/

*** Experiment
*** Explore
*** Expand
*** Operate
** https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp
* Managing expectations
Programers tend to over promise and under deliver, which is not fun for anyone. Sales tends to oversell and let the delivery team deal with the mess later.
* Product Manager is the key hire
- They sit between business, design and technology
- What is the right thing to build for the business at this moment
- How do you make tradeoffs?
* Design is how it works
** A messy process to get to something clean
** Intuition about complexity is often wrong
