#+title: Beginning Emacs for JavaScript Development
#+subtitle: Rediscovering emacs
#+tags[]: emacs, javascript, floss
#+date: 2019-12-11
#+draft: true

* Intro

I've dipped back into the world of Free Software, a place that I used to know very well and it's now even better than I remember it.  I love the package manager!  I've started using emacs again -- a lot of the muscle memory is still there.  Lets look at how to setup emacs to do JavaScript development.

First install emacs.  You need emacs > 25 to use magit, so its probable that you'll need to upgrade the emacs in your system.  If you are using linux I'll let you sort that out directly, but below are the instructions for OSX.

* Installing on debian

The latest emacs (26 at the time of this writing) isn't available yet, but you can install 25.

#+BEGIN_SRC bash
sudo apt-get install emacs25
#+END_SRC

* Using homebrew to install emacs on OSX

#+BEGIN_SRC bash
brew cask install emacs
#+END_SRC


If you are on OSX you'll also need to install some certs, and defined in [[https://blog.vifortech.com/posts/emacs-tls-fix/][this wonderful walkthrough.]]  Simply:

#+BEGIN_SRC bash
brew install libressl
#+END_SRC

And then in =.emacs= add

#+BEGIN_SRC elisp
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
#+END_SRC

* Changing the capslock key to control

Go into =System Preferences...= -> =Keyboard= and select =Modifier Keys=.  Switch caps lock key to be control.  Totally worth it, but you still need to do a META dance with the options key, instead of the more obvious command key.

Another nice thing is to map your command-key to META, which is much more natural.  Put this in =.emacs=

#+BEGIN_SRC elisp
    (setq mac-option-key-is-meta nil)
    (setq mac-command-key-is-meta t)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil)
#+END_SRC
* Emacs super basics

Emacs is something much more than an editor.  It's an environment within which you can interact with your computer that could replace many of the tools that you use now.  I normally use Terminal for example to interact with things and open up other programs to do specific tasks.  Emacs could replace terminal, as well as all of the programs that are used to get into the nitty gritty of making computers do what you want.  I recommend the [[https://www.masteringemacs.org/][Mastering Emacs]] book as a great way to get started in your emacs journey.

** Misc but important
#+ATTR_HTML: :class table table-striped
| =ESC ESC ESC= | get you out of most messes |
| =C-g C-g C-g= | also get you out           |
| =C-x C-x=     | exit emacs                 |
| =C-x C-z=     | minimize emacs             |
| =C-x C-==     | Embiggen font              |
| =C-x C--=     | Miniturize font            |

** Files
#+ATTR_HTML: :class table table-striped
| =C-x C-f= | open a file |
| =C-x C-s= | save a file |

** Moving around

#+ATTR_HTML: :class table table-striped
| =C-f= | forward character     |
| =M-f= | forward word          |
| =M-e= | forward sentence      |
| =C-e= | forard line           |
| =C-b= | backward character    |
| =M-b= | backward word         |
| =M-a= | backward sentence     |
| =C-a= | backward line         |
| =M-<= | beginning of document |
| =M->= | end of document       |

Interative search is started with =C-s=

** Windows

#+ATTR_HTML: :class table table-striped
| =C-x-1= | makes the current window full screen |
| =C-x-2= | split horizontally                   |
| =C-x-3= | split vertically                     |
| =C-x-o= | switch focus                         |
|         |                                      |

** Bookmarks
#+ATTR_HTML: :class table table-striped
| Key       | Desc             |
|-----------+------------------|
| =C-x r m= | Set a bookmark   |
| =C-x r l= | List bookmarks   |
| =C-x r b= | Jump to bookmark |

* Adding a new package registry

=M-x customize= and search for =package archives=.  Insert a new one named 'stable melpa' and add =https://stable.melpa.org/packages/=.  You can paste into emacs using =C-y=.  

Also add =https://melpa.org/packages/=.

I also like to set =visual-line-mode= globally to true.

Then =Apply and Save=

Refresh the package list using =M-x package-refresh-contents=

** If you get an gpg error

Go to =customize= again and change =package-check-signature= to nil.  Apply and save.  Then =M-x package-install RET gnu-elpa-keyring-update RET=.  Then go back to customize and revert =package-check-signature= to =allow-unsigned=

* Changing themes and fonts
Use =M-x customize-themes= to change your theme.  I also like to have a much large font, which you can adjust using =M-x customize-face= and setting the =default= size to something like 140.

* 2 spaced tabs
#+BEGIN_SRC elisp

;; https://www.emacswiki.org/emacs/NoTabs
(setq-default indent-tabs-mode nil)

;; https://www.emacswiki.org/emacs/TabStopList
(setq tab-stop-list (number-sequence 2 120 2))

#+END_SRC 
* Install =use-package=
=M-x package-install RET use-package RET=

* Install =helm=
Install =M-x package-install helm-ls-git= which should install =helm= as well.  Another nice helm package is =helm-ag= which will grep over your files to look for specific values.  Then in your =.emacs= put

#+BEGIN_SRC elisp
(require 'helm-config)
(require 'helm-ls-git)

(global-set-key (kbd "C-x C-d") 'helm-browse-project)
(global-set-key (kbd "C-x f") 'helm-ag)
#+END_SRC

Once you load everything, using =C-x C-d= will let you open up files in a /project/ which is defined as the files in the current /git/ repository.  =C-x f= will let you use ag to file files (this overrides the fill-column command which I don't end up using).

I encourage you to [[https://github.com/emacs-helm/helm/wiki][read through the documentation]].
* Install =flycheck= and =company=

  To install, =M-x package-install RET flycheck= and =M-x package-install RET company= And then in =.emacs=:

#+BEGIN_SRC elisp
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

  Once this is done, you need to install the specific linter for the languages you are interested in.  For example:

#+BEGIN_SRC bash
npm i -g eslint
#+END_SRC
  
* Install =emmet=

To install =M-x package-install emmet-mode=

#+BEGIN_SRC elisp
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(setq emmet-move-cursor-between-quotes t)
#+END_SRC

* Install =lsp-mode=

  This is the big one.  [[https://github.com/emacs-lsp/lsp-mode]] gives you a list of all of the languages supported and what needs to be installed, but lets focus on =javascript= for now.

=M-x package-install RET lsp-ui RET=

=M-x package-install RET company-lsp RET=

=M-x package-install RET helm-lsp RET=

Then in =.emacs=

#+BEGIN_SRC elisp
(use-package lsp-mode
  :hook (XXX-mode . lsp)
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC

And then install some of the language servers.  In the case of javascript

#+BEGIN_SRC bash
npm i -g typescript-language-server; npm i -g typescript
#+END_SRC

* Test with =create-react-app=

Lets now test out what we've done.  First lets create a simple react-app.

#+BEGIN_SRC bash

npx create-react-app testapp

#+END_SRC

* Install =rjsx-mode= and =xref-js2=

I mainly do react development on the front end, and the =rjsx-mode= depends on the =js2-mode= which is pretty great.  We'll install this and =xref-js2= to help navigate through files better.

=M-x package-install= then =rjsx-mode=

=M-x package-install= then =xref-js2=

And add to your =~/.emacs=

#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
#+END_SRC

You can use the mouse to select -- or =C-space= to select the start of the region and move the pointer around. Once you have the region selected do =M-x eval-buffer= to load the config in place.

* Install =magit=


=M-x package-install RET magit RET=

Inside of =.emacs= add:

#+BEGIN_SRC elisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Magit is amazingly powerful, and I'm still trying to learn it.

Probably the best way to get into it is to first run =C-x g= (or =M-x magit-status=) and then use =C-h m=, which will show you the documentation for the current /mode/, in this case magit.  This is a good way to poke around, though it makes sense to check out [[https://magit.vc/manual/][the manual]] which is pretty extensive.

* Install =golden-ratio=

This is silly but fun. =M-x package-install RET golden-ratio RET= and then in =.emacs=

#+BEGIN_SRC elisp
(require 'golden-ratio)

(golden-ratio-mode 1)
#+END_SRC

* Usage example
After I checkout my repo, I bookmark the base folder using =C-x r m=.  Then I can go there faster without having to navigate through the filesystem.

I start up a shell using =M-x shell= to run commands.  You can =M-x rename-buffer= to give it a name, and then be able to start up additional shells if needed.  Depending upon what you are doing, =C-x 2= splits horizontally so that can be nice to see the output of anything you need.

=C-x C-d= will locate files within that project, which is generally a good substitute for the find in project function that I normally use to move around.

* References

1. https://www.masteringemacs.org/
2. https://blog.vifortech.com/posts/emacs-tls-fix/
3. https://github.com/emacs-lsp/lsp-mode
3. https://gist.github.com/CodyReichert/9dbc8bd2a104780b64891d8736682cea
3. https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html
4. https://github.com/felipeochoa/rjsx-mode
5. https://groups.google.com/forum/#!topic/emacs-helm/zaBbg2tFAuM
