<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Will Schenk</title><link>https://willschenk.com/tags/git/</link><description>Recent content in git on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/git/feed.xml" rel="self" type="application/rss+xml"/><item><title>gitlog in sqlite</title><link>https://willschenk.com/articles/2020/gitlog_in_sqlite/</link><pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/gitlog_in_sqlite/</guid><description>askgit is a great way to look at information inside of a repository. However it currently doesn&amp;#39;t support looking at the files inside of the commit itself â€“ it gives you a view of the repository at the time of the commit, but not the patch itself. Since I don&amp;#39;t know enough about golang and sqlite virtual tables, lets just create a sqlite3 database from the logfile. Get the gitlog We are going to use our favorite test repo, ruby-git because it&amp;#39;s so deliciously meta.</description></item><item><title>Using Askgit</title><link>https://willschenk.com/articles/2020/using_askgit/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/using_askgit/</guid><description>askgit provides a sql interface to your git repository. Let&amp;#39;s install it and see what we can figure out about the repo. Installing Following the instructions on the website, we can build the go binary with: go get -v -tags=sqlite_vtable github.com/augmentable-dev/askgit This will download the package, the dependencies, and compile everything into an executable. If you can&amp;#39;t figure out where it&amp;#39;s installed, check that you have GOPATH set correctly, and it will end up in $GOPATH/bin.</description></item><item><title>Splitting Git Repos and Work Directories</title><link>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</guid><description>I found a tutorial on how to manage your dotfiles, that works by splitting up the git repository (normally the .git directory) from the work directory. Since I have a lot of code that I put in my tutorials, I adapted the technique to have individual article directories mirrored in their own github repository.
Repositories and Work Directories The normal usage of git is to type git clone &amp;lt;remote&amp;gt; to get a copy of the local directory, mess with stuff, and then add and commit your changes.</description></item></channel></rss>