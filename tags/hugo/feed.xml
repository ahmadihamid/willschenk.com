<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on Will Schenk</title>
    <link>https://willschenk.com/tags/hugo/</link>
    <description>Recent content in hugo on Will Schenk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://willschenk.com/tags/hugo/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Splitting Git Repos and Work Directories</title>
      <link>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</guid>
      <description>I found a tutorial on how to manage your dotfiles, that works by splitting up the git repository (normally the .git directory) from the work directory. Since I have a lot of code that I put in my tutorials, I adapted the technique to have individual article directories mirrored in their own github repository.
Repositories and Work Directories The normal usage of git is to type git clone &amp;lt;remote&amp;gt; to get a copy of the local directory, mess with stuff, and then add and commit your changes.</description>
    </item>
    
    <item>
      <title>Easy scraping with httpie and jq</title>
      <link>https://willschenk.com/articles/2019/easy_scraping_with_httpie_and_jq/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2019/easy_scraping_with_httpie_and_jq/</guid>
      <description>&lt;p&gt;I recently saw a tweet mentioning the combination of using &lt;a href=&#34;https://httpie.org/&#34;&gt;HTTPie&lt;/a&gt; (a command line HTTP client), &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; (a lightweight and flexible command-line JSON processor) and &lt;a href=&#34;https://github.com/tomnomnom/gron&#34;&gt;Gron&lt;/a&gt; (Make JSON greppable!) was &amp;ldquo;all you needed to build a scraper.&amp;rdquo;  Lets see if that&amp;rsquo;s true.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automating hugo builds using CircleCI</title>
      <link>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Here&#39;s a simple CircleCI configuration to pull down the latest version of your hugo site on GitHub commits, build it, and then push it to github pages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding a CMS to hugo</title>
      <link>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</guid>
      <description>Just because we have a static site doesn&amp;rsquo;t mean that we can&amp;rsquo;t have an admin tool to write and edit posts! Lets go through how we can add the NetlifyCMS to the site and host it wherever we want.
In my case I&amp;rsquo;m storing the code on GitHub and also serving the pages from GitHub Pages. Netlify also seems like a really promising company with a number of other services that they offer, so I&amp;rsquo;d encourage you to check it out.</description>
    </item>
    
    <item>
      <title>Building a hugo site and theme with Bootstrap</title>
      <link>https://willschenk.com/articles/2018/building-a-hugo-site/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2018/building-a-hugo-site/</guid>
      <description>Now that&amp;rsquo;s its 2018 its time to retool the blog using hugo. Why not? Hugo is built in golang and is blazing fast and everything is cleaner than it was in the middleman years.
One of the reasons that I liked middleman &amp;ndash; it&amp;rsquo;s usage of the rails&amp;rsquo; Sprockets library &amp;ndash; is no longer a strength. The javascript and front-end world has moved over to WebPack and I&amp;rsquo;ve personally moved over to create-react-app.</description>
    </item>
    
  </channel>
</rss>