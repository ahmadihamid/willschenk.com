<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>toys on Will Schenk</title><link>https://willschenk.com/tags/toys/</link><description>Recent content in toys on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/toys/feed.xml" rel="self" type="application/rss+xml"/><item><title>Receiving posted JSON with Sinatra</title><link>https://willschenk.com/articles/2015/receiving-posted-json-with-sinatra/</link><pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/receiving-posted-json-with-sinatra/</guid><description>Here&amp;rsquo;s some simple code to accept a JSON string posted to a Sinatra end point rather than a form. I switched from using jQueries $.ajax method to superagent as part of my exploration of the node javascript package universe, and it has a different way of serializing nest objects when posting as a form. Specifically, it doesn&amp;rsquo;t.
I needed something that could do both.
Code to use form encoding or JSON blob This first tries and loads the parameters using the normal form encoding methods.</description></item><item><title>OSX Script for Kiosk Mode</title><link>https://willschenk.com/articles/2015/osx-script-for-kiosk-mode/</link><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/osx-script-for-kiosk-mode/</guid><description>In the office, we run Jenkins on the same machine that we run Benevolent Gaze. During iOS builds, the iOS simulator will take over the screen for the build, and then leave the beautiful screen on the desktop, hiding our smiling faces. We want to return to Safari in this case, but we also want to make sure that if someone is actually in front of the machine it will let them do their thing.</description></item><item><title>Embedding 3d models on your page</title><link>https://willschenk.com/articles/2014/embedding-3d-models-on-your-page/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/embedding-3d-models-on-your-page/</guid><description>Github has an embeddable 3d model viewer that you can use to display a model on your site. The model needs to be hosted in a github repo, and the format is
&amp;lt;script src=&amp;quot;https://embed.github.com/view/3d/&amp;lt;username&amp;gt;/&amp;lt;repo&amp;gt;/&amp;lt;ref&amp;gt;/&amp;lt;path_to_file&amp;gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
Here&amp;rsquo;s a model of me that we made using the Structure 3d scanner which is a fun device that plugs into your iPhone or iPad.
Pretty fun right?
The next thing you need to do is to get a 3d printer, so you can create action figures for your office.</description></item><item><title>How to track your coworkers</title><link>https://willschenk.com/articles/2014/how-to-track-your-coworkers/</link><pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/how-to-track-your-coworkers/</guid><description>How much information do you bleed?
Ever wonder who is else is using your network? Or,who has actually showed up at the office?
Networking primer The simplest thing we can do to make this work is to check to see which devices have registered themselves on the network. As devices come and go, they connect automatically, so we will have a pretty good idea if people are there or not. Phones seem to attach and detach quite frequency, probably to conserve battery, so if we are want to answer the question &amp;ldquo;is so-and-so in the office&amp;rdquo; we&amp;rsquo;ll need to add additional logic to determine how far spaced the &amp;ldquo;sighting&amp;rdquo; events are to mean that the person has left the office, rather than the phone has gone to sleep.</description></item></channel></rss>