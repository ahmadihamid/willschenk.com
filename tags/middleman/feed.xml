<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>middleman on Will Schenk</title>
    <link>https://willschenk.com/tags/middleman/</link>
    <description>Recent content in middleman on Will Schenk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://willschenk.com/tags/middleman/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a GUI for managing middleman blogs</title>
      <link>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</guid>
      <description>Can we make static site generators work like a normal site? Lets take a look at how we&amp;rsquo;d start to implement Slow Data and Fast Sites using the example of building an admin UI for a Middleman blog.
TLDR Given a middleman app with middleman-blog and middleman-blog-drafts configured:
 Add middleman-blog-ui in your Gemfile. This document describes how middleman-blog-ui works. Add activate :blog_ui in config.rb Start middleman server Visit http://localhost:4567/admin.  And now you are living in the fabulous world where you can, from your browser:</description>
    </item>
    
    <item>
      <title>Adding search to a middleman blog</title>
      <link>https://willschenk.com/articles/2015/adding-search-to-a-middleman-blog/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2015/adding-search-to-a-middleman-blog/</guid>
      <description>We&amp;rsquo;re going to build a simple, niave search for middleman blogs. We&amp;rsquo;re going to build a search index at build time, and then use that index to perform the search itself on the client side.
Building the index When you typed in something in google, it doesn&amp;rsquo;t then go and hit every page on the internet to check to see if there&amp;rsquo;s a match. It doesn&amp;rsquo;t even look at every page that it has squirreled away somewhere in the googleplex.</description>
    </item>
    
    <item>
      <title>Slow data and Fast Sites</title>
      <link>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</guid>
      <description>This article walks through the motivations driving and benefits of using a the Seed Architecture for building performant websites using Middleman, React, and a seperate API server such as Parse. The benefits are:
 You get full SEO with a heavy client JavaScript site without having to do crazy things with PhantomJS or meta fragments. Hosting and operations become both cheap and doesn&amp;rsquo;t require a support team. Scaling out the system is mainly a bandwidth problem, and secondarily a API scaling problem for a subset of behavior.</description>
    </item>
    
    <item>
      <title>Building Middleman Extensions</title>
      <link>https://willschenk.com/articles/2014/building-middleman-extensions/</link>
      <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2014/building-middleman-extensions/</guid>
      <description>Middleman extensions, like rails plugins, are packaged as gems. There are three main ways to extend middleman. You can add helpers, add middleman commands, or extend the sitemap generation in someway. Lets go through those in detail.
Creating the extension Create a gem using bundle gem _name_
$ bundle gem middleman-graphviz Add middleman-core to your gem dependancies in the .gemspec file:
spec.add_runtime_dependency &amp;#39;middleman-core&amp;#39;, [&amp;#39;&amp;gt;= 3.0.0&amp;#39;] Register your extension into middleman. Our gem will be activated in the sites config.</description>
    </item>
    
    <item>
      <title>Middleman Tricks and Hacks</title>
      <link>https://willschenk.com/articles/2014/middleman-tricks-and-hacks/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2014/middleman-tricks-and-hacks/</guid>
      <description>As part of the process of getting this site to work, I learned some more things about how to better build a site with middleman. Building off of our foundational article here are a few other things that I found very useful when using middleman to build a static site with a bunch of dynamically generated content.
Partials The index.html.haml, articles.html.haml, tag.html.haml and calendar.html.haml pages all use the same partial to list out the post archives, which are mostly the same.</description>
    </item>
    
    <item>
      <title>Building Sites with Middleman</title>
      <link>https://willschenk.com/articles/2014/building-sites-with-middleman/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2014/building-sites-with-middleman/</guid>
      <description>I make a lot of websites, and I have a certain toolkit that I use to build them. The most useful things I use are:
 layouts and partials so I only need to set things up once haml for writing html, since I don&amp;rsquo;t like closing tags Bootstrap and sass for writing css Markdown for formatting large blogs of content coffeescript for JavaScript  Middleman is a static site generator, which means that it takes a bunch of source files, does some stuff with it, and produces static HTML, CSS, Images, and Javascript that can be hosted on a basic server somewhere, including hosting on S3 or Github Pages so you don&amp;rsquo;t need to consider a server.</description>
    </item>
    
  </channel>
</rss>