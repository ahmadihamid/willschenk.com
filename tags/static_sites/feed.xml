<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Static_sites on Will Schenk</title>
    <link>https://willschenk.com/tags/static_sites/</link>
    <description>Recent content in Static_sites on Will Schenk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://willschenk.com/tags/static_sites/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automating hugo builds using CircleCI</title>
      <link>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Here&#39;s a simple CircleCI configuration to pull down the latest version of your hugo site on GitHub commits, build it, and then push it to github pages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding a CMS to hugo</title>
      <link>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</guid>
      <description>Just because we have a static site doesn&amp;rsquo;t mean that we can&amp;rsquo;t have an admin tool to write and edit posts! Lets go through how we can add the NetlifyCMS to the site and host it wherever we want.
In my case I&amp;rsquo;m storing the code on GitHub and also serving the pages from GitHub Pages. Netlify also seems like a really promising company with a number of other services that they offer, so I&amp;rsquo;d encourage you to check it out.</description>
    </item>
    
    <item>
      <title>Building a hugo site and theme with Bootstrap</title>
      <link>https://willschenk.com/articles/2018/building-a-hugo-site/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2018/building-a-hugo-site/</guid>
      <description>Now that&amp;rsquo;s its 2018 its time to retool the blog using hugo. Why not? Hugo is built in golang and is blazing fast and everything is cleaner than it was in the middleman years.
One of the reasons that I liked middleman &amp;ndash; it&amp;rsquo;s usage of the rails&amp;rsquo; Sprockets library &amp;ndash; is no longer a strength. The javascript and front-end world has moved over to WebPack and I&amp;rsquo;ve personally moved over to create-react-app.</description>
    </item>
    
    <item>
      <title>Building a GUI for managing middleman blogs</title>
      <link>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</guid>
      <description>Can we make static site generators work like a normal site? Lets take a look at how we&amp;rsquo;d start to implement Slow Data and Fast Sites using the example of building an admin UI for a Middleman blog.
TLDR Given a middleman app with middleman-blog and middleman-blog-drafts configured:
 Add middleman-blog-ui in your Gemfile. This document describes how middleman-blog-ui works. Add activate :blog_ui in config.rb Start middleman server Visit http://localhost:4567/admin.</description>
    </item>
    
    <item>
      <title>Slow data and Fast Sites</title>
      <link>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</guid>
      <description>This article walks through the motivations driving and benefits of using a the Seed Architecture for building performant websites using Middleman, React, and a seperate API server such as Parse. The benefits are:
 You get full SEO with a heavy client JavaScript site without having to do crazy things with PhantomJS or meta fragments. Hosting and operations become both cheap and doesn&amp;rsquo;t require a support team. Scaling out the system is mainly a bandwidth problem, and secondarily a API scaling problem for a subset of behavior.</description>
    </item>
    
  </channel>
</rss>