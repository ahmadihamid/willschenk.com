<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Will Schenk</title>
  <subtitle>Lets build things</subtitle>
  <id>http://willschenk.com</id>
  <link href="http://willschenk.com"/>
  <link href="http://willschenk.com/feed.xml" rel="self"/>
  <updated>2014-11-15T19:00:00-05:00</updated>
  <author>
    <name>Will Schenk</name>
  </author>
  <entry>
    <title>Embedding 3d models on your page</title>
    <link rel="alternate" href="http://willschenk.com/embedding-3d-models-on-your-page/"/>
    <id>http://willschenk.com/embedding-3d-models-on-your-page/</id>
    <published>2014-11-15T19:00:00-05:00</published>
    <updated>2014-11-15T19:00:00-05:00</updated>
    <author>
      <name>Will Schenk</name>
    </author>
    <content type="html">&lt;p&gt;Github has an &lt;a href="https://help.github.com/articles/3d-file-viewer/"&gt;embeddable 3d model viewer&lt;/a&gt; that you can use to display a model on your site.  The model needs to be hosted in a github repo, and the format is&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://embed.github.com/view/3d/&amp;lt;username&amp;gt;/&amp;lt;repo&amp;gt;/&amp;lt;ref&amp;gt;/&amp;lt;path_to_file&amp;gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a model of me that we made using the (Structure 3d scanner)[&lt;a href="http://structure.io"&gt;http://structure.io&lt;/a&gt;], which is a fun device that plugs into your iPhone or iPad.&lt;/p&gt;

&lt;script src="https://embed.github.com/view/3d/sublimeguile/model_army/master/will%20clean.stl"&gt;&lt;/script&gt;

&lt;p&gt;Pretty fun right?&lt;/p&gt;

&lt;p&gt;The next thing you need to do is to get a 3d printer, so you can create action figures for your office.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image" src="https://silvrback.s3.amazonaws.com/uploads/f685deb9-2974-425c-bb5b-6d6727b33159/10514107_312439818930875_824765904_n_large.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;End.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Personal information from only a URL</title>
    <link rel="alternate" href="http://willschenk.com/personal-information-from-only-a-url/"/>
    <id>http://willschenk.com/personal-information-from-only-a-url/</id>
    <published>2014-11-13T19:00:00-05:00</published>
    <updated>2014-11-13T19:00:00-05:00</updated>
    <author>
      <name>Will Schenk</name>
    </author>
    <content type="html">&lt;p&gt;Ever wonder what you can find out by looking at a url?  How about physical addresses, server location, emails, phone numbers, various links to other profiles (which can in turn be structurally scraped), technology stack, and more. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ socialinvestigator net page http://willschenk.com/bio
              domain: willschenk.com
          created_on: 2014-10-31
          expires_on: 2015-10-31
          updated_on: 2014-10-31
      registrar_name: ENOM, INC.
       registrar_url: www.enom.com
  registrant_contact: 
                     name: WILL SCHENK
             organization: HAPPYFUNCORP
                  address: 18 BRIDGE STREET, 2E
                     city: BROOKLYN
                      zip: 11201
                    state: NY
             country_code: US
                    phone: +91.76976430
                    email: WSCHENK@GMAIL.COM
         server_name: ec2-54-225-218-167.compute-1.amazonaws.com
      server_country: United States
     server_location: Ashburn, Virginia
     server_latitude: 39.0437
    server_longitude: -77.4875
     server_ip_owner: Amazon Technologies Inc. (AT-88-Z)
              emails: wschenk@gmail.com, will@happyfuncorp.com
               title: Will Schenk
         description: The blog of Will Schenk
      twitter_author: wschenk
         twitter_ids: wschenk
          responsive: true
            rss_feed: /feed.rss
           atom_feed: /feed
       twitter_links: https://twitter.com/wschenk, http://twitter.com/wschenk
      linkedin_links: http://www.linkedin.com/pub/will-schenk/0/266/420/
     instagram_links: http://instagram.com/wschenk
        github_links: https://github.com/wschenk
        technologies: Chartbeat, Font Awesome, Google Analytics, RackCache, Ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Standalone code as &lt;a href="https://gist.github.com/wschenk/7d333acb59b7768f2637"&gt;a gist&lt;/a&gt;, the complete socialinvestigator code &lt;a href="https://github.com/sublimeguile/socialinvestigator"&gt;available on github&lt;/a&gt; or and is easily installable on your machine as a gem.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install socialinvestigator
$ socialinvestigator net get_apps_json
$ socialinvestigator net page_info url
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Poking around different urls can give you a sense of the corporate entities behind sites, who is actually involved, and help you track down people when you can&amp;#39;t find them otherwise.  It&amp;#39;s actually hard to figure out which URL to include on this post since the data seems so personal and yet people put it out there.  This takes the messy HTML that&amp;#39;s out there and returns structured information that you can use to explore profiles on other sites in a way that can be totally automated.&lt;/p&gt;

&lt;h2&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;What this code does is to first search for DNS information to see who owns the domain and if there&amp;#39;s any contact information associated with it.  It then looks at who owns the IP address and tries to locate where it is geographically.&lt;/p&gt;

&lt;p&gt;It then looks at the page itself to see &lt;a href="http://ogp.me"&gt;Open Graph meta data&lt;/a&gt;,&lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitter Card meta data&lt;/a&gt; and other basic SEO tags.&lt;/p&gt;

&lt;p&gt;Finally, it looks inside the page for likely looking links to other social networks, and scans the page and HTTP metadata for clues about what underlying technology the site was built in.  (The metadata for the technology fingerprinting is from the &lt;a href="https://github.com/ElbertF/Wappalyzer"&gt;Wappalyzer project&lt;/a&gt; which I cobbled together a basic ruby engine for.)&lt;/p&gt;

&lt;p&gt;And finally it takes all of the facts that it has collected, figured out which ones take priority, and prints them out.&lt;/p&gt;

&lt;h2&gt;Finding Domain info&lt;/h2&gt;

&lt;p&gt;The first thing that we do is look for the URL and try to find the domain name.  The difference between a hostname and domain name is subtle, partly in some cases they are interchangeable, and partly because DNS is the &lt;a href="http://codex.happyfuncorp.com/slides/93#1"&gt;second most amazing thing about the Internet&lt;/a&gt;.  (The most truly mind-blowing thing clearly &lt;a href="http://en.wikipedia.org/wiki/Default_route"&gt;the default route&lt;/a&gt;, the &lt;em&gt;life, liberty, and pursuit of happiness&lt;/em&gt; of the Internet.)  A globe spanning, highly distributed database that lets 2.5 billion internet users look up any of the 4 billion potential server addresses in less than 50ms without any real centralized control isn&amp;#39;t exactly straightforward.&lt;/p&gt;

&lt;p&gt;DNS manages this complexity by delegating authority for different branches of the entire namespace.  The first level is called the Top Level Domains, most famous being &lt;em&gt;.com&lt;/em&gt;, when you buy a domain name from someone they delegate authority over that name space to you.  These can go deep, especially with large global organizations.  The first thing we do is look for that &lt;strong&gt;Start of Authority&lt;/strong&gt; (SOA) record for machine named in the URL.  If we can&amp;#39;t find one for that machine, we look up the chain until we find something.&lt;/p&gt;

&lt;p&gt;This looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;require &amp;#39;dnsruby&amp;#39;

hostname = URI(url).hostname

def find_domain( hostname )
  puts &amp;quot;Looking for SOA of #{hostname}&amp;quot;
  dns = Dnsruby::Resolver.new
  soa = dns.query( hostname, &amp;quot;SOA&amp;quot; ).answer.select do |rr|
    rr.is_a? Dnsruby::RR::IN::SOA
  end

  return hostname if soa.length &amp;gt; 0

  # Go from &amp;quot;news.bbc.co.uk&amp;quot; -&amp;gt; &amp;quot;bbc.co.uk&amp;quot;
  parts = hostname.split( /\./ )
  return nil if parts.length &amp;lt;= 2

  find_domain( parts.slice(1,100).join( &amp;quot;.&amp;quot; ) )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;#39;ve found the domain, we query the &lt;code&gt;whois&lt;/code&gt; databases to find out who has owns the domain name.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;require &amp;#39;whois&amp;#39;

whois = Whois.lookup( domain )

puts &amp;quot;Expires: #{whois.expires_on}&amp;quot;
# Print all contact information we find
whois.contacts.each { |c| puts c }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the challenges here is that there is no standardized format that there is no standardized way of parsing &lt;code&gt;whois&lt;/code&gt; responses.  The &lt;code&gt;whois&lt;/code&gt; gem gives it a serious try:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l `bundle show whois`/lib/whois/record/parser | wc -l
     209
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;#39;s over 500 different whois servers out there, so you won&amp;#39;t always get a parseable response.  In that case we print out that we can&amp;#39;t find a parser, and we store the unparsed response in the data object as &lt;code&gt;unparsed_whois&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;whois.parts.each do |p|
  # Check for responses that we couldn&amp;#39;t parse
  if Whois::Record::Parser.parser_for(p).is_a? Whois::Record::Parser::Blank
    puts &amp;quot;Couldn&amp;#39;t find a parser for #{p.host}:&amp;quot;
    puts p.body
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Finding IP and hosting information&lt;/h2&gt;

&lt;p&gt;Now we look at the IP address, and then do a reverse lookup on it to see what the server machine name is.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;ip_address = Dnsruby::Resolv.getaddress uri.host

data.remember :ip_address, ip_address
begin
  data.remember :server_name, Dnsruby::Resolv.getname( ip_address )
rescue Dnsruby::NXDomain
  # Couldn&amp;#39;t do the reverse lookup
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes interesting things are encoded in the server name, like if it&amp;#39;s a Rackspace cloud server vs a Rackspace static server, but we make no attempt to interpret that string.&lt;/p&gt;

&lt;p&gt;Then we try and see where the IP address is located geographically, using &lt;a href="http://freegeoip.net/"&gt;freegeoip.net&lt;/a&gt;.  If you did a lot of this it would make sense to buy a more detailed database from &lt;a href="https://www.maxmind.com/en/home"&gt;Maxmind&lt;/a&gt; but for something quick and dirty this works.  Given that you need to follow the rules of the company you are in, it&amp;#39;s interesting to see where the servers are located.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;location_info = HTTParty.get(&amp;#39;http://freegeoip.net/json/&amp;#39; + ip_address)

data.remember :server_country, location_info[&amp;#39;country&amp;#39;]
data.remember :server_location, [location_info[&amp;#39;city&amp;#39;], location_info[&amp;#39;region_name&amp;#39;]].select { |x| x }.join( &amp;quot;, &amp;quot;)
data.remember :server_latitude, location_info[&amp;#39;latitude&amp;#39;]
data.remember :server_longitude, location_info[&amp;#39;longitude&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also do a &lt;code&gt;whois&lt;/code&gt; lookup on the IP address, to see who owns that IP block.  This should give us an idea of who is hosting the site.  Note that we don&amp;#39;t even pretend to parse the &lt;code&gt;whois&lt;/code&gt; response here in a clever way.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;ip_whois = Whois.lookup ip_address

ip_whois.to_s.each_line.select { |x| x=~/Organization/ }.each do |org|
  if org =~ /Organization:\s*(.*)\n/
    data.another :server_ip_owner, $1
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Page meta data&lt;/h2&gt;

&lt;p&gt;Now we load up the page, and look for some basic stuff.  The first thing that we do is load the &lt;a href="http://en.wikipedia.org/wiki/Meta_element"&gt;meta tags&lt;/a&gt; into something more accessible.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;response = HTTParty.get url
parsed = Nokogiri.parse response.body

# Meta tags

meta = {}
parsed.css( &amp;quot;meta[name]&amp;quot; ).each do |t|
  meta[t.attributes[&amp;quot;name&amp;quot;].value] = t.attributes[&amp;quot;content&amp;quot;].value if t.attributes[&amp;quot;content&amp;quot;]
end

parsed.css( &amp;quot;meta[property]&amp;quot; ).each do |t|
  meta[t.attributes[&amp;quot;property&amp;quot;].value] = t.attributes[&amp;quot;content&amp;quot;].value
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we load up some basic SEO info, including if there are any feeds for this site&amp;#39;s content.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;data.remember( :author, meta[&amp;#39;author&amp;#39;] ) 
data.remember( :description, meta[&amp;#39;description&amp;#39;] ) 
data.remember( :keywords, meta[&amp;#39;keywords&amp;#39;] ) 
data.remember( :generator, meta[&amp;#39;generator&amp;#39;])
data.remember( :responsive, true )  if meta[&amp;quot;viewport&amp;quot;] =~ /width=device-width/
data.remember( :server, response.headers[&amp;#39;server&amp;#39;] )
data.remember( :page_title, parsed.title )

# RSS Feed:
if feed = parsed.css( &amp;#39;link[type=&amp;quot;application/rss+xml&amp;quot;]&amp;#39; ).first
  feed = feed.attributes[&amp;#39;href&amp;#39;].value
  data.remember( :rss_feed, feed )
end

# Atom Feed:
if feed = parsed.css( &amp;#39;link[type=&amp;quot;application/atom+xml&amp;quot;]&amp;#39; ).first
  feed = feed.attributes[&amp;#39;href&amp;#39;].value
  data.remember( :atom_feed, feed )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Twitter Cards&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitter Card meta data&lt;/a&gt; is a way to control how your data gets displayed on twitter, which has the benefit of defining some summary meta data around the social graph.  One thing thing to note is that &lt;code&gt;twitter:creator&lt;/code&gt; is the author of this page, while &lt;code&gt;twitter:site&lt;/code&gt; is the twitter account for the overall site.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;data.remember( :twitter_title, meta[&amp;quot;twitter:title&amp;quot;] ) 
data.remember( :twitter_creator, meta[&amp;quot;twitter:creator&amp;quot;] ) 
if /@(.*)/.match( meta[&amp;quot;twitter:creator&amp;quot;] )
  data.another( :twitter_ids, $1 )
end
data.remember( :twitter_site_author, meta[&amp;quot;twitter:site&amp;quot;] )
if /@(.*)/.match( meta[&amp;quot;twitter:site&amp;quot;] )
  data.another( :twitter_ids, $1 )
end
data.remember( :twitter_image, meta[&amp;quot;twitter:image&amp;quot;] ) 
data.remember( :twitter_description, meta[&amp;quot;twitter:description&amp;quot;] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Open Graph&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://ogp.me"&gt;Open Graph meta data&lt;/a&gt; is really about what your link looks like when someone shares it on Facebook.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;data.remember( :og_title, meta[&amp;quot;og:title&amp;quot;] ) 
data.remember( :og_description, meta[&amp;quot;og:description&amp;quot;] )
data.remember( :og_type, meta[&amp;quot;og:type&amp;quot;] ) 
data.remember( :og_image, meta[&amp;quot;og:image&amp;quot;] ) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Social Page Links&lt;/h2&gt;

&lt;p&gt;We search for social links:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Email&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/mailto:(.*@.*\..*)/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Twitter&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/twitter.com\/[^\/]*$/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedIn&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/linkedin.com/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Instagram&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/instagram.com/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/facebook.com\/[^\/]*$/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google+&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/plus.google.com\/[^\/]*$/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Github&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/github.com\/[^\/]*$/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;For Twitter, Facebook, and Google+ we are only letting through links that have a simple query string, since for the most part this means that it&amp;#39;s the user&amp;#39;s ID.&lt;/p&gt;

&lt;h2&gt;Parsing Twitter Shares and Intents&lt;/h2&gt;

&lt;p&gt;We then look for Twitter Share links, and try and parse out the user names found in there.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;# Look for twitter shared links

twitter_shared = matching_links( parsed, /twitter.com\/share/ )

twitter_shared.each do |l|
  text = l[&amp;#39;data-text&amp;#39;]

  # See if there&amp;#39;s a &amp;quot;by @user&amp;quot; in the text
  if /by\s*@([^\s]*)/.match text
    data.another( :twitter_ids, $1 )
    data.remember( :twitter_by, $1 ) 
  end

  # Look for all &amp;quot;@usernames&amp;quot; in the text
  if text
    text.split.select { |x| x =~ /@\s*/ }.each do |id|
      data.another( :twitter_ids, id.slice( 1,100 ) ) # We don&amp;#39;t want the @
    end
  end

  # See if there&amp;#39;s a via link on the anchor tag
  if l[&amp;#39;data-via&amp;#39;]
    data.another( :twitter_ids, l[&amp;#39;data-via&amp;#39;])
  end

  possible_via = URI.decode( (URI(l[&amp;#39;href&amp;#39;]).query) || &amp;quot;&amp;quot; ).split( /&amp;amp;amp;/ ).collect { |x| x.split( /=/  ) }.select { |x| x[0] == &amp;#39;via&amp;#39; }
  if possible_via.size &amp;gt; 0
    data.another( :twitter_ids, possible_via[0][1] )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are also twitter intent links:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;twitter_intent = hrefs( matching_links( parsed, /twitter.com\/intent/ ) )

twitter_intent.each do |t|
  URI.decode( URI(t.gsub( / /, &amp;quot;+&amp;quot; )).query ).split( /&amp;amp;/ ).select do |x| 
    x =~ /via/
  end.collect do |x| 
    x.gsub( /via=/, &amp;quot;&amp;quot; )
  end.each do |via|
    data.another( :twitter_ids, via )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Technology Finger Prints&lt;/h2&gt;

&lt;p&gt;The final thing we do is to load the &lt;code&gt;apps.json&lt;/code&gt; file from &lt;a href="https://github.com/ElbertF/Wappalyzer"&gt;Wappalyzer&lt;/a&gt; which is a cross-platform utility that uncovers the technologies used on websites.  This has a list of regex for the header tags, meta tags, scripts and other parts of the html to make guesses about which technology is in place.  What is in place is very rudimentary, but it gives a general sense of what is used to made the site.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;The standalone code as &lt;a href="https://gist.github.com/wschenk/7d333acb59b7768f2637"&gt;a gist&lt;/a&gt;, and you can check out the complete &lt;a href="https://github.com/sublimeguile/socialinvestigator"&gt;socialinvestigator code on github&lt;/a&gt;.  To run this on your machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install socialinvestigator
$ socialinvestigator net get_apps_json
$ socialinvestigator net page_info http://willschenk.com/bio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It may take a while to get the responses.  If you want to see everything it&amp;#39;s doing, use the &lt;code&gt;--debug&lt;/code&gt; switch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ socialinvestigator net page_info http://willschenk.com/bio --debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reverse lookup can take a while, and if you want to turn that off:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ socialinvestigator net page_info http://willschenk.com/bio --noreverse
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Bot Design Patterns</title>
    <link rel="alternate" href="http://willschenk.com/bot-design-patterns/"/>
    <id>http://willschenk.com/bot-design-patterns/</id>
    <published>2014-11-10T19:00:00-05:00</published>
    <updated>2014-11-10T19:00:00-05:00</updated>
    <author>
      <name>Will Schenk</name>
    </author>
    <content type="html">&lt;p&gt;In the antediluvian days before Google found everything for us, personal &lt;em&gt;software agents&lt;/em&gt; were going to continuously do our bidding in &lt;em&gt;cyberspace&lt;/em&gt;, tracking down air fares, making stock trades and otherwise doing futuristic things that we soon wouldn&amp;#39;t be able to live without.  The anxiety of Y2K rose and crested, and the messianic aura of &lt;em&gt;agents&lt;/em&gt; was washed away by more centralized and effective solutions.&lt;/p&gt;

&lt;p&gt;The aspirational residue did yield some nuggets, and the idea has found partial success in the form of the &lt;em&gt;bot&lt;/em&gt;. In the popular imagination bots exist on &lt;a href="http://www.newyorker.com/tech/elements/the-rise-of-twitter-bots"&gt;Twitter as art projects&lt;/a&gt; or as &lt;a href="http://www.nytimes.com/2013/08/11/sunday-review/i-flirt-and-tweet-follow-me-at-socialbot.html?_r=0"&gt;marketing machines&lt;/a&gt; or as &lt;a href="http://www.radiolab.org/story/137407-talking-to-machines/"&gt;the perfect online dating scandal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bots can be characterized by asking a few questions, and from these answers we can tell something about their implementation and what it takes to build one:  &lt;strong&gt;Do they react to messages?&lt;/strong&gt; &lt;strong&gt;Do they know who they are talking to?&lt;/strong&gt; &lt;strong&gt;Can they learn from what was said?&lt;/strong&gt; &lt;strong&gt;Do they know where the conversation is taking place?&lt;/strong&gt;  &lt;strong&gt;Do they remember the overall conversation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From this, we can classify bots into one of six types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notifiers&lt;/li&gt;
&lt;li&gt;Reactors&lt;/li&gt;
&lt;li&gt;Space Reactors&lt;/li&gt;
&lt;li&gt;Responders&lt;/li&gt;
&lt;li&gt;Space Responders&lt;/li&gt;
&lt;li&gt;Conversationists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these have progressively more complex context that the bot is operating in.  Most chat mediums have different message types, where message can be directed towards or private to a particular user.  Confounding things further, some have a native concept of &lt;em&gt;spaces&lt;/em&gt;, generally called a &lt;em&gt;room&lt;/em&gt; or a &lt;em&gt;channel&lt;/em&gt;, and as we treat people differently in different context the bot will also need to be aware of the difference context that the conversion is taking place.  We can call those services &lt;em&gt;Spaced&lt;/em&gt;.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Spaced&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SMS&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Groups are a dynamic list of people&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Desktop Notifications&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Stuck on one computer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Push Notifications&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;One way communication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.aim.com"&gt;AIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Group chat not core usage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://support.google.com/chat/answer/159495?hl=en"&gt;GChat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Group chat not core usage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.apple.com/ios/messages/"&gt;iMessage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Groups are a dynamic list of people&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://twitter.com/"&gt;Twitter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Lists aren&amp;#39;t groups&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.yammer.com"&gt;Yammer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Sorta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Channels&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.hipchat.com"&gt;HipChat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Rooms&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://slack.com"&gt;Slack&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://campfirenow.com"&gt;Campfire&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Rooms&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Keeping track of User / Space context is more challenging than just User context&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Notifiers&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Notifiers&lt;/em&gt; are the &amp;quot;simplest type&amp;quot;of bots, in the sense that the messaging logic is a minor part of the overall program.  As a consequence they are the most common and the most varied.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Broadcast a message based upon an external source&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t react to messages, so the answers to all the other questions are irrelevant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trick in &lt;em&gt;Notifiers&lt;/em&gt; is in figuring out what to say, not sending the message.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;# Twitter Example
message = &amp;quot;Hello, World&amp;quot;
client.update( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="sh"&gt;# AppleScript from the command line example
$ MESSAGE=&amp;quot;Hello, World&amp;quot;
$ /usr/bin/osascript -e &amp;quot;display notification \&amp;quot;$MESSAGE\&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="rb"&gt;# Using the terminal-notifier gem
require &amp;#39;terminal-notifier&amp;#39;
TerminalNotifier.notify &amp;quot;\u2705 green!&amp;quot;, :title =&amp;gt; &amp;quot;Hello, World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are best implemented by having one program generate the information, and sending that to another program that sends the message to the chat service.  This could be a monitoring agent that is checking to see if a URL is responding, and if not, sends an alert.  It could be a build process that returns a success or failure message.  &lt;/p&gt;

&lt;p&gt;It could be a program that selects &amp;quot;the next word&amp;quot; from a lists of words and tweets one out every hour.  Or it could make a bunch of API calls to different services, correlate that with information from a database, do more complicated calculations, and then post it.  There&amp;#39;s a bot that monitors the top links on hacker news, so it needs to pull down a list of top content, keep track of if it&amp;#39;s tweeted it out before, and then send out the message.  The sending part is simple, but the overall bot may not be.&lt;/p&gt;

&lt;h2&gt;Reactors&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reactors&lt;/em&gt; take action based upon incoming messages, but have no memory of who it&amp;#39;s talking with or what space it&amp;#39;s talking in.  The who and where maybe in the message headers, and the bot can return the message in the correct place, but there is no bot-persisted memory of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reacts to messages on the chat service&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t remember anything that was said&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic idea is that a reactor gets a message, does something with it, and moves on.  A lot of twitter bots follow this pattern, where they are looking at things on the stream and commenting upon them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on_message( message ) = -&amp;gt;
  result = act_on_message( message )
  message.reply( result )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, here&amp;#39;s something that listens for tweets matching the string &lt;code&gt;not a feminist&lt;/code&gt; and reacts by tweeting that that user isn&amp;#39;t a feminist:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;streaming_client.filter(track: &amp;quot;not a feminist&amp;quot;) do |object|
  if object.is_a?( Twitter::Tweet ) &amp;amp;&amp;amp; object.user.user_name != BOT_NAME
    client.update( &amp;quot;. @#{object.user.user_name} is not a feminist&amp;quot; )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It could do something more interesting, like looking for an image url, downloading it, running it through ImageMagick, posting it to S3, and then tweeting it back out.  But since the bot itself keeps no message or user state, we consider it a &lt;em&gt;reactor&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Message Dispatching&lt;/h2&gt;

&lt;p&gt;Here we reach a phase change in the level of ambient complexity of the bot.  Simple &lt;em&gt;Reactors&lt;/em&gt; respond to all messages the same way, relying on the filter to select messages that it cares about.  More complex reactors need to figure out what message it&amp;#39;s being sent and reply differently:&lt;/p&gt;

&lt;p&gt;Case loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on_message( message ) = -&amp;gt;
  dispatch( message )

dispach( message ) = -&amp;gt;
  case message.text
    when /^echo/
      do_echo( message )
    else
      message.reply( &amp;quot;Don&amp;#39;t know what you mean&amp;quot; )

do_echo( message ) = -&amp;gt;
  message.reply( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Command objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on_message( message ) = -&amp;gt;
  dispatch( message )

dispatch( message ) = -&amp;gt;
  command = find_command_object( message )
  command.execute( message )

echo_command.execute( message ) = -&amp;gt;
  message.reply( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can also be done using &lt;em&gt;metaprogramming&lt;/em&gt;, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Dispatcher
  dispatch( message ) = -&amp;gt;
    if reponds_to? message.command
      self.send( message.command, message )

class MyBotClass &amp;lt; Dispatcher
  echo( message ) = -&amp;gt;
    message.reply( message )

bot = MyBotClass.new

on_message( message ) = -&amp;gt;
  bot.dispatch( message )  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is nonsense pseudo code, but a lot of chat bot libraries focus in on that area doing something very similar to what &lt;code&gt;Thor&lt;/code&gt; does for command line programs.&lt;/p&gt;

&lt;h2&gt;Space Reactors&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Space Reactors&lt;/em&gt;, in addition to having an awesome name, react to incoming messages, and know where they are receiving a message.  The bot has memory of the place, and will respond to the user differently depending upon where the conversation was taking place.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reacts to messages on the chat service&lt;/li&gt;
&lt;li&gt;Knows where its being addressed&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t remember anything that was said&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a reactor is run in on Spaced chat medium, it needs to factor in where the message was received.  Instead of having &lt;em&gt;user&lt;/em&gt; and &lt;em&gt;message&lt;/em&gt; to work with, it now has &lt;em&gt;user&lt;/em&gt;, &lt;em&gt;message&lt;/em&gt;, and &lt;em&gt;space&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can either find the space within each of the commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyBot &amp;lt; Dispatcher
  wtf( message ) = -&amp;gt;
    space = find_space_from( message )
    commit_message = space.last_commit_message
    message.reply( commit_message )

bot = MyBot.new

on_message( message ) = -&amp;gt;
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or locate the commands inside of the space, which lets you separate out which commands are available depending the properties of the space.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class PublicSpaceReactor &amp;lt; Dispatcher
  wtf( message ) = -&amp;gt;
    message.reply( &amp;quot;This space has no commits&amp;quot; )

class ProjectSpaceReactor &amp;lt; Dispatcher
  wtf( message ) = -&amp;gt;
    message.reply( project.last_commit_message )

class SpaceDispatcher &amp;lt; Dispatcher
  dispatch( message ) = -&amp;gt;
    space = find_space( message )
    responder = nil
    if space.project?
      responder =  ProjectSpaceReactor.new( space.project )
    else
      responder = PublicSpaceReactor.new
    responder.dispatch( message )

bot = SpaceDispatcher.new

on_message( message ) = -&amp;gt;
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a HipChat bot and have a room for each company project, and you want to have the bot respond to &lt;code&gt;wtf&lt;/code&gt; with the last commit message on github.  The first thing that you need to do is look at which room the message came from, and correlate that a list of repositories, then make a Github API call, and finally post the commit message back to the room.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;  # This is a lita based bot, which provides dispatching 
  # so we find the space inside of the command
  def wtf(response)
    project = find_project response.message.source.room
    message = project.last_commit_message
    response.reply message
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;find_project&lt;/code&gt; method implies that you now need to have persistent state associated with the &lt;em&gt;Space&lt;/em&gt;, in this case the unspecified &lt;code&gt;project&lt;/code&gt; object.  It&amp;#39;s not just a matter of making sure that your reply goes to the correct place, but that what you reply will changed based upon where the person said it.&lt;/p&gt;

&lt;h2&gt;Responders&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Responders&lt;/em&gt; listen for messages and remember what was said to them.  They are different from &lt;em&gt;Reactors&lt;/em&gt; because they have persisted User state, and so can learn something from the user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reacts to messages&lt;/li&gt;
&lt;li&gt;Knows who they are talking to&lt;/li&gt;
&lt;li&gt;Can learn from what was said&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s natural here to include the dispatching inside of the object that keeps track of the user state.  Here&amp;#39;s a pseudo example of a bot that lets you update your nickname. First by loading the user inside of the Bot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class NickBot &amp;lt; Dispatcher
  nick( message ) = -&amp;gt;
    user = User.load_from_datastore( message.user )
    user.nickname = message.arg1
    user.save
    message.reply( &amp;quot;Your nick name has been updated to &amp;quot; + message.arg1 )

bot = NickBot.new

on_message( message ) = -&amp;gt;
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it may also make sense to create different types of dispatchers for different users, in this pseudo code there are 3 different types of responders and depending upon who is sending the message different functions are available to them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class AnonymousUserResponder &amp;lt; Dispatcher
  nick( message ) = -&amp;gt;
    user.nickname = message.arg1
    user.save
    message.reply( &amp;quot;Your nick name has been updated to &amp;quot; + message.arg1 )

class NamedUserResponder &amp;lt; AnonymousUserResponder
  comment( message ) = -&amp;gt;
    create_a_comment( user.nickname, message )
    message.reply( &amp;quot;Thanks for the message&amp;quot; )

class AdminResponder &amp;lt; NamedUserResponder
  restart( message ) = -&amp;gt;
    restart_server
    message.reply( &amp;quot;You&amp;#39;ve restarted the server&amp;quot; )

class UserDispatcher &amp;lt; Dispatcher
  dispatch( message ) = -&amp;gt;
    user = User.load_from_datastore( message.user )
    responder = nil
    if user.admin?
      responder = AdminResponder.new( user )
    elseif user.nickname?
      responder = NamedUserResponder.new( user )
    else
      responder = AnonymousUserResponder.new( user )
    responder.dispatch( message )

bot = UserDispatcher.new

on_message( message )
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;This example is misleading because in real life direct inherency doesn&amp;#39;t scale well, as we&amp;#39;ll see below.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Space Responders&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Space Responder&lt;/em&gt; learn things about who is talking with them and the context in which they are speaking.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reacts to messages&lt;/li&gt;
&lt;li&gt;Knows who they are talking to&lt;/li&gt;
&lt;li&gt;Can learn from what was said&lt;/li&gt;
&lt;li&gt;Knows where its being addressed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The challenge here is how do you juggle the permutations of state.  Lets take the example of a user is an admin in one project, where they can send commands to reboot the server, and in another project they can only open new tickets.  In the basic case, you can do everything in each of your methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ServerBot &amp;lt; Dispatcher
  restart( message ) = -&amp;gt;
    user = find_user( message )
    space = find_space( message )
    if space.is_admin?( user )
      restart_server
      message.reply( &amp;quot;Go go go&amp;quot; )
    else
      message.reply( &amp;quot;Sorry Charlie, try again&amp;quot; )

  ticket( message ) = -&amp;gt;
    space = find_space( message )
    ticket = space.create_ticket_message( message )
    message.reply( ticket.id + &amp;quot; has been created&amp;quot; )

bot = ServerBot.new

on_message( message ) = -&amp;gt;
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets say that we had two different types of users, admins or not, and two different types of spaces, one that mapped to a project and another that mapped to a hangout area.  We could expand out idea of the SpaceDispatcher to return a different command object based upon the combinations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class SpaceDispatcher &amp;lt; Dispatcher
  dispatch( message ) = -&amp;gt;
    space = find_space( message )
    user = find_user( message )
    if !space.project?
      if space.is_admin?( user )
        AdminLobbyResponder.new( space, user ).dispatch( message )
      else
        LobbyResponder.new( space, user ).dispatch( message )
    else if space.is_admin?( user )
      AdminSpaceResponder.new( space, user ).dispatch( message )
    else
      ProjectResponder.new( space, user ).dispatch( message )

class LobbyResponder &amp;lt; Dispatcher
  vote( message ) = -&amp;gt;
    votes = space.tally_term( message )
    message.reply( &amp;quot;That totals: &amp;quot; + votes )

class AdminLobbyResponder &amp;lt; LobbyResponder
  topic( message ) = -&amp;gt;
    space.set_topic( message )
    message.reply( &amp;quot;Topic updated&amp;quot; )

class ProjectResponder &amp;lt; LobbyResponder
  ticket( message ) = -&amp;gt;
    ticket = space.create_ticket( message )
    message.reply( ticket.id + &amp;quot; has been created&amp;quot; )

class AdminProjectResponder &amp;lt; ProjectResponder
  restart( message ) = -&amp;gt;
    restart_server
    message.reply( &amp;quot;Server restarted&amp;quot; )

bot = SpaceDispatcher.new

on_message( message ) = -&amp;gt;
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;re also using inheritance to include all of the methods that the regular user can do into the class that has all of the Admin methods.  This pseudocode has turned into an unholey mixture of Ruby and CoffeeScript, so it probably isn&amp;#39;t work doing into language details with this.  But straight up inheritance doesn&amp;#39;t work well for this type of reuse, and in our example project admins won&amp;#39;t be able to change the &lt;code&gt;topic&lt;/code&gt;.  These commands would better be structured as mixins.&lt;/p&gt;

&lt;h2&gt;Conversationists&lt;/h2&gt;

&lt;p&gt;The final, and technically most complicated type of bot to write is a &lt;em&gt;Conversationalist&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reacts to messages&lt;/li&gt;
&lt;li&gt;Knows who they are talking to&lt;/li&gt;
&lt;li&gt;Can learn from what was said&lt;/li&gt;
&lt;li&gt;Has conversational state&lt;/li&gt;
&lt;li&gt;Knows where its being addressed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Conversation &amp;lt; Dispatcher
  # knowledge collected during the course of the conversation #

  # state machine mapping conversion state #

  dispatch( message ) = -&amp;gt;
    # Store incoming message in log
    # interpret the response based upon the current state
    # print a message on state transition

class ChatBot &amp;lt; Dispatcher
  dispatch( message ) = -&amp;gt;
    user = find_user( message )
    conversation = user.current_conversation
    conversation.dispatch( message )

bot = ChatBot.new

on_message(message) = -&amp;gt;
  bot.dispatch( message )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;User&lt;/code&gt; object is responsible for keeping track of conversations.  &lt;code&gt;current_conversation&lt;/code&gt; can be smart enough to create a new conversation when things are stale or if there user explicitly closed out an active one.&lt;/p&gt;

&lt;p&gt;Here is an example of code from a bot that asks you questions about where you are and what sort of food you are looking for.  It searches a number of APIs in the background to see what information it can get from what you say.  The code is written with an Adaptor to talk Twitter or GChat, and they both have a different idea of location.  Sometimes it can get an accurate enough location the message metadata, but more likely it&amp;#39;s too vague and it will ask you to clarify.  (&lt;em&gt;Not all of that logic is below, but its useful to demonstrate the use of the state machine&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;The knowledge attributes are what the bot knows in the conversation.  Below you&amp;#39;ll see an example of &lt;em&gt;knowledge of the conversation&lt;/em&gt; from the state machine, &lt;em&gt;knowledge of what as been said&lt;/em&gt; from previous messages, and &lt;em&gt;knowledge of deduction&lt;/em&gt; from the content and context of the messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ConversationResponder
  # State Machine
  workflow do
    state :new do
      event :process_message,  :transitions_to =&amp;gt; :processing_location
    end

    state :processing_location do
      event :needs_location,    :transitions_to =&amp;gt; :clarify_location
      event :location_clear,    :transitions_to =&amp;gt; :has_location
    end

    state :clarify_location do
      event :process_message,   :transitions_to =&amp;gt; :processing_location
    end

    state :has_location do
      event :needs_keywords,    :transitions_to =&amp;gt; :clarify_keywords
      event :has_keywords,      :transitions_to =&amp;gt; :processing_keywords
    end

    state :clarify_keywords do
      event :process_message,   :transitions_to =&amp;gt; :processing_keywords
    end

    state :processing_keywords do
      event :needs_keywords,    :transitions_to =&amp;gt; :clarify_keywords
      event :needs_location,    :transitions_to =&amp;gt; :clarify_location
      event :found_places,      :transitions_to =&amp;gt; :refining_selection
      event :no_places_found,   :transitions_to =&amp;gt; :clarify_keywords
    end

    state :refining_selection do
      event :process_message,   :transitions_to =&amp;gt; :processing_keywords
    end
  end

  # Knowledge Attributes
  def looking_for_location?
    !knows_location? || location_vague?
  end

  def knows_location?
    !lat.blank? &amp;amp;&amp;amp; !lng.blank?
  end

  def location_vague?
    return false if location_range == &amp;quot;ROOFTOP&amp;quot; || location_range == &amp;quot;RANGE_INTERPOLATED&amp;quot;
    #Added by Jon so that zip codes are sufficient
    return false if location_range == &amp;quot;APPROXIMATE&amp;quot;
    #TODO: put more intelligence into this: eg location_range = &amp;quot;GEOMETRIC_CENTER&amp;quot; is good enough for Iowa but not for NYC
    true
  end

  def location_name
    if knows_location?
      status,address =  Geocode.reverse_geocode([lat,lng])
      return address
    else
      return nil
    end
  end

  def looking_for_places?
    places.count == 0
  end

  def have_keyword_messages?
    !keyword_messages.nil? &amp;amp;&amp;amp; keyword_messages.length &amp;gt; 0
  end

  def keyword_messages
    @keyword_messages ||= messages.select{ |x| x.looks_like_keyword? &amp;amp;&amp;amp; !x.is_a?( OutgoingMessage ) }
  end

  def keywords
    keyword_messages.collect { |x| x.search_terms }.join( &amp;quot;, &amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h2&gt;That&amp;#39;s the shape of it&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Notifiers&lt;/em&gt;, &lt;em&gt;Reactors&lt;/em&gt;, &lt;em&gt;Space Reactors&lt;/em&gt;, &lt;em&gt;Responders&lt;/em&gt;, &lt;em&gt;Space Responders&lt;/em&gt;, and &lt;em&gt;Conversationists&lt;/em&gt;.  Writing &lt;em&gt;Notifiers&lt;/em&gt; and &lt;em&gt;Reactors&lt;/em&gt; are more playful, and as you get into things later in the list you spend a lot more time dealing with code and logic complexity.&lt;/p&gt;

&lt;p&gt;The distinction between a &lt;em&gt;Spaced&lt;/em&gt; and &lt;em&gt;Global&lt;/em&gt; chat medium is something that makes using chat libraries, and building &lt;strong&gt;Adapters&lt;/strong&gt; to different services difficult.  If the library was built with a &lt;em&gt;Spaced&lt;/em&gt; service in mind it&amp;#39;s pretty straightforward to make it work for one, but going the other way isn&amp;#39;t swimming upstream.&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Towards a taxonomy of Twitter Bots&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://tinysubversions.com/botsummit/2014/"&gt;BotSummit&lt;/a&gt; was a few days ago, and a bunch of people got together to talk about Twitter bots that they made largely as art projects.  Here&amp;#39;s a draft of a taxonomy of Twitter bots made by &lt;a href="https://twitter.com/tullyhansen"&gt;Tully Hanson&lt;/a&gt;.  In the parlance of this post, these are mainly &lt;em&gt;Notifiers&lt;/em&gt; and &lt;em&gt;Reactors&lt;/em&gt;, with some possible &lt;em&gt;Responders&lt;/em&gt; thrown in:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Twitter Bot Taxonomy" src="http://i.imgur.com/bKXNQ0V.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here&amp;#39;s the &lt;a href="https://gist.github.com/tullyhansen/7621632"&gt;source document&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notifiers&lt;/em&gt; are interesting not because of their technology, but because of what they actually do.  Here&amp;#39;s a &lt;a href="https://docs.google.com/document/d/1bka4o1RE9RPUeoUzgpTIKRWsgWHzZEKEADialnv7haQ/view"&gt;list of ideas that people came up with&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;Agents of Note&lt;/h1&gt;

&lt;h2&gt;&lt;a href="https://hubot.github.com"&gt;Hubot from Github&lt;/a&gt; is a company chat bot, written in Node:&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image" src="https://silvrback.s3.amazonaws.com/uploads/5a2b7f44-c37b-4cfc-b0df-16e28a889160/HUBOT_large.jpg" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub, Inc., wrote the first version of Hubot to automate our company chat room. Hubot knew how to deploy the site, automate a lot of tasks, and be a source of fun in the company. Eventually he grew to become a formidable force in GitHub. But he led a private, messy life. So we rewrote him.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Image from &lt;a href="https://hubot.github.com"&gt;Hubot site&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://www.lita.io"&gt;Lita&lt;/a&gt; is similar to Hubot, but written in Ruby:&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image" src="https://silvrback.s3.amazonaws.com/uploads/a1895cd0-8429-4a82-9cd7-2b7557d3c0a3/lita-94f070fbb79e8ec62cc7a21ca39f8448_large.png" /&gt;
&lt;em&gt;Image from &lt;a href="https://www.lita.io"&gt;Lita&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://github.com/cantino/huginn"&gt;Huginn&lt;/a&gt; is your agent, standing by&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image sb_float" src="https://silvrback.s3.amazonaws.com/uploads/4c8d7718-e8a1-4d6f-92b7-e2d1c92cec43/220px-Odin%2C_der_G%C3%B6ttervater_large.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Huginn takes a bit to install, but it&amp;#39;s a full on &lt;em&gt;software agent&lt;/em&gt; of the old school.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Huginn is a system for building agents that perform automated tasks for you online. They can read the web, watch for events, and take actions on your behalf. Huginn&amp;#39;s Agents create and consume events, propagating them along a directed graph. Think of it as a hackable Yahoo! Pipes plus IFTTT on your own server. You always know who has your data. You do.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re just getting started, but here are some of the things that you can do with Huginn right now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track the weather and get an email when it&amp;#39;s going to rain (or snow) tomorrow (&amp;quot;Don&amp;#39;t forget your umbrella!&amp;quot;)&lt;/li&gt;
&lt;li&gt;List terms that you care about and receive emails when their occurrence on Twitter changes. (For example, want to know when something interesting has happened in the world of Machine Learning? Huginn will watch the term &amp;quot;machine learning&amp;quot; on Twitter and tell you when there is a large spike.)&lt;/li&gt;
&lt;li&gt;Watch for air travel or shopping deals&lt;/li&gt;
&lt;li&gt;Follow your project names on Twitter and get updates when people mention them&lt;/li&gt;
&lt;li&gt;Scrape websites and receive emails when they change&lt;/li&gt;
&lt;li&gt;Connect to Adioso, HipChat, Basecamp, Growl, FTP, IMAP, Jabber, JIRA, MQTT, nextbus, Pushbullet, Pushover, RSS, Bash, Slack, StubHub, translation APIs, Twilio, Twitter, Wunderground, and Weibo, to name a few.&lt;/li&gt;
&lt;li&gt;Compose digest emails about things you care about to be sent at specific times of the day&lt;/li&gt;
&lt;li&gt;Track counts of high frequency events and send an SMS within moments when they spike, such as the term &amp;quot;san francisco emergency&amp;quot;&lt;/li&gt;
&lt;li&gt;Send and receive WebHooks&lt;/li&gt;
&lt;li&gt;Run arbitrary JavaScript Agents on the server&lt;/li&gt;
&lt;li&gt;Track your location over time&lt;/li&gt;
&lt;li&gt;Create Amazon Mechanical Turk workflows as the inputs, or outputs, of agents. (&amp;quot;Once a day, ask 5 people for a funny cat photo; send the results to 5 more people to be rated; send the top-rated photo to 5 people for a funny caption; send to 5 final people to rate for funniest caption; finally, post the best captioned photo on my blog.&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Image &amp;quot;Odin, der Göttervater&amp;quot; by Carl Emil Doepler (1824-1905) - Wägner, Wilhelm. 1882. Nordisch-germanische Götter und Helden. Otto Spamer, Leipzig &amp;amp; Berlin. Page 7.. Licensed under Public domain via Wikimedia Commons - &lt;a href="http://commons.wikimedia.org/wiki/File:Odin,_der_G%C3%B6ttervater.jpg#mediaviewer/File:Odin,_der_G%C3%B6ttervater.jpg"&gt;Link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Let me know cool things you build!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making a command line utility with gems and thor</title>
    <link rel="alternate" href="http://willschenk.com/making-a-command-line-utility-with-gems-and-thor/"/>
    <id>http://willschenk.com/making-a-command-line-utility-with-gems-and-thor/</id>
    <published>2014-11-07T19:00:00-05:00</published>
    <updated>2014-11-07T19:00:00-05:00</updated>
    <author>
      <name>Will Schenk</name>
    </author>
    <content type="html">&lt;p&gt;Some scripts work well because they are self contained and don&amp;#39;t have a lot of dependancies, like the &lt;a href="http://willschenk.com/how-to-track-your-coworkers"&gt;hosts on your network tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Others scripts
- have more code than fits into a single file
- multiple options and switches
- have an extensive set of dependancies&lt;/p&gt;

&lt;p&gt;And on those cases, its better to make a gem and use thor&lt;/p&gt;

&lt;h2&gt;Hammer of the Gods&lt;/h2&gt;

&lt;p&gt;Lets figure out how to make some command line tools and package them up so that they can be shared and used by other people.  Being able to write a script for one off tasks or simple automation is often a lot easier than building out a full app.  There are a lot of libraries and gems out there that make it easy to get information from out there on &lt;em&gt;the web&lt;/em&gt;, and they generally require a little glue to make it work.&lt;/p&gt;

&lt;p&gt;This article is a walk through in building out a command line utility that will let you pass in a URL that will search &lt;a href="https://news.ycombinator.com"&gt;hacker news&lt;/a&gt; for any mentions.  In further postings, we&amp;#39;ll see how to integrate twitter and google analytics searching.&lt;/p&gt;

&lt;h2&gt;First, building a beautiful gem&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://rubygems.org"&gt;Rubygems&lt;/a&gt; is the standard package manage for ruby, and &lt;a href="http://bundler.io"&gt;Bundler&lt;/a&gt; is the best way to manage dependancies for your application.  &lt;code&gt;Bundler&lt;/code&gt; is what makes you &lt;code&gt;Gemfile&lt;/code&gt;s work.  &lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t have the &lt;code&gt;bundler&lt;/code&gt; gem installed, you probably don&amp;#39;t have &lt;a href="http://rvm.io"&gt;rvm installed.&lt;/a&gt;.  You should go ahead and do that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle gem&lt;/code&gt; is a command that will generate a template for building a gem.  It will create a standard directory structure, create a git repo, and make it easy to build out gems, install them locally, and push them up to &lt;a href="http://rubygems.org/"&gt;the central gem repository&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ bundle gem socialinvestigator
      create  socialinvestigator/Gemfile
      create  socialinvestigator/Rakefile
      create  socialinvestigator/LICENSE.txt
      create  socialinvestigator/README.md
      create  socialinvestigator/.gitignore
      create  socialinvestigator/socialinvestigator.gemspec
      create  socialinvestigator/lib/socialinvestigator.rb
      create  socialinvestigator/lib/socialinvestigator/version.rb
Initializing git repo in /Users/wschenk/src/socialinvestigator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first file to look at is the &lt;code&gt;socialinvestigator.gemspec&lt;/code&gt;.  This defines information about your gem, a description, homepage url, the files that are included, and all of it&amp;#39;s dependancies.  There are two types of dependencies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Runtime dependencies&lt;/strong&gt; are what the gem needs to be installed and functional when its running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development dependencies&lt;/strong&gt; are additional gems needed for building the gem, which normally mean gems needed for testing and building.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets edit the file and add a line&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;spec.add_dependency &amp;#39;thor&amp;#39;
spec.add_dependency &amp;#39;httparty&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Giving us something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;# coding: utf-8
lib = File.expand_path(&amp;#39;../lib&amp;#39;, __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require &amp;#39;socialinvestigator/version&amp;#39;

Gem::Specification.new do |spec|
  spec.name          = &amp;quot;socialinvestigator&amp;quot;
  spec.version       = Socialinvestigator::VERSION
  spec.authors       = [&amp;quot;Will Schenk&amp;quot;]
  spec.email         = [&amp;quot;wschenk@gmail.com&amp;quot;]
  spec.summary       = %q{Simple command line tool to look at urls.}
  spec.description   = %q{Simple command line tool to look at urls.}
  spec.homepage      = &amp;quot;&amp;quot;
  spec.license       = &amp;quot;MIT&amp;quot;

  spec.files         = `git ls-files -z`.split(&amp;quot;\x0&amp;quot;)
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
  spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})
  spec.require_paths = [&amp;quot;lib&amp;quot;]

  spec.add_dependency &amp;#39;thor&amp;#39;
  spec.add_dependency &amp;#39;httparty&amp;#39;

  spec.add_development_dependency &amp;quot;bundler&amp;quot;, &amp;quot;~&amp;gt; 1.6&amp;quot;
  spec.add_development_dependency &amp;quot;rake&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run &lt;code&gt;bundle&lt;/code&gt; to install.&lt;/p&gt;

&lt;h2&gt;Creating a binary&lt;/h2&gt;

&lt;p&gt;Now we need to create a binary in the &lt;code&gt;bin&lt;/code&gt; folder, which doesn&amp;#39;t yet exist.  The line &lt;code&gt;spec.executables&lt;/code&gt; in the &lt;code&gt;.gemspec&lt;/code&gt; is what tells rubygems which files are being included and installed with the gem.  The definition that the bundler gem template gives you will include all files in the &lt;code&gt;bin&lt;/code&gt; directory which are checked into &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets create &lt;code&gt;bin/socialinvestigator&lt;/code&gt; now:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;#!/usr/bin/env ruby -wU

require &amp;#39;socialinvestigator&amp;#39;

puts &amp;quot;Hello, world!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to make it executable,&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;wschenk$ chmod +x bin/socialinvestigator
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Running the binary&lt;/h2&gt;

&lt;p&gt;Running this binary now by typing &lt;code&gt;bin/socialinvestigator&lt;/code&gt; will give an error.  This is because it&amp;#39;s being called in your normal user context.  The first line in the file does &lt;code&gt;require &amp;#39;socialinvestigator&amp;#39;&lt;/code&gt;, which is the &lt;em&gt;gem we are writing&lt;/em&gt;, and that &lt;em&gt;gem hasn&amp;#39;t been installed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can run this in the context of the gem itself, by running&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator 
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should always run your gem this way.  The &lt;code&gt;bundle exec&lt;/code&gt; command will load all of the gems specified in the &lt;code&gt;Gemfile.lock&lt;/code&gt; and then start your script in that context.  This is also going to be important later on, when you are working on a new version while you have an older version installed.&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Thor&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://whatisthor.com"&gt;Thor&lt;/a&gt; is a toolkit for building command-line interfaces.  The &lt;code&gt;bundle&lt;/code&gt; command itself is implemented in &lt;code&gt;thor&lt;/code&gt;.  Thor makes it easy to expose methods in your class, with parameters and options, to the command line.  Let&amp;#39;s see how it works.&lt;/p&gt;

&lt;p&gt;We are going to add a new file in &lt;code&gt;lib/socialinvestigator&lt;/code&gt; called &lt;code&gt;cli.rb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;require &amp;#39;thor&amp;#39;

module Socialinvestigator
  class HammerOfTheGods &amp;lt; Thor
    desc &amp;quot;hello NAME&amp;quot;, &amp;quot;This will greet you&amp;quot;
    long_desc &amp;lt;&amp;lt;-HELLO_WORLD

    `hello NAME` will print out a message to the person of your choosing.

    Brian Kernighan actually wrote the first &amp;quot;Hello, World!&amp;quot; program 
    as part of the documentation for the BCPL programming language 
    developed by Martin Richards. BCPL was used while C was being 
    developed at Bell Labs a few years before the publication of 
    Kernighan and Ritchie&amp;#39;s C book in 1972.

    http://stackoverflow.com/a/12785204
    HELLO_WORLD
    option :upcase
    def hello( name )
      greeting = &amp;quot;Hello, #{name}&amp;quot;
      greeting.upcase! if options[:upcase]
      puts greeting
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The art of naming variables, classes and methods is one that I&amp;#39;ve honed over years of progressional software engineering, based largely on both my experience as an inheritor of other&amp;#39;s inexplicable code, as well as the practical jokes that I, evidently, liked to play on my future self.  Also, I was inspired by &lt;a href="http://static.echonest.com/bonhamizer/go.html?trid=TRSBVUT12F87DF0212"&gt;The Bonhamizer&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets make sure that we require that new file in the main &lt;code&gt;lib/socialinvestigator.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;require &amp;quot;socialinvestigator/version&amp;quot;
require &amp;quot;socialinvestigator/cli&amp;quot;

module Socialinvestigator
  # Your code goes here...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now lets change our &lt;code&gt;bin/socialinvestigator&lt;/code&gt; ruby scripts to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;#!/usr/bin/env ruby -U

require &amp;#39;socialinvestigator&amp;#39;

Socialinvestigator::HammerOfTheGods.start( ARGV )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a class/ &lt;em&gt;bon mot&lt;/em&gt; named &lt;code&gt;Socialinvestigator::HammerOfTheGods&lt;/code&gt; that we can now place our code in.  We&amp;#39;ve changed our script to call the class method &lt;code&gt;Socialinvestigator::HammerOfTheGods.start( ARGV )&lt;/code&gt;, which passes in the command like arguments into the Thor base class.  These arguments are parsed, and Thor looks for public method on our class, with the right number of arguments, to run when passed on the command line.&lt;/p&gt;

&lt;p&gt;Running it with no arguments will print out a list of all the commands available.  In our case, only the build in &lt;code&gt;help&lt;/code&gt; command, and our &lt;code&gt;hello&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator 
Commands:
  socialinvestigator hello NAME      # This will greet you
  socialinvestigator help [COMMAND]  # Describe available commands or one specific command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets try running our command with the wrong number of arguments, &lt;em&gt;i.e. none&lt;/em&gt;.  Here it will print out the short usage of the command that we specified with the &lt;code&gt;desc&lt;/code&gt; DSL.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator hello
ERROR: &amp;quot;socialinvestigator hello&amp;quot; was called with no arguments
Usage: &amp;quot;socialinvestigator hello NAME&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built in help command will bring out usage information for the method using the &lt;code&gt;long_desc&lt;/code&gt; if available and the regular description if not.  These are optional but why not, right?  Notice also how it&amp;#39;s smart enough to figure out the command name, in this case &lt;code&gt;socialinvestigator&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator help hello
Usage:
  socialinvestigator hello NAME

Options:
  [--upcase=UPCASE]  

Description:
  `hello NAME` will print out a message to the person of your choosing.

  Brian Kernighan actually wrote the first &amp;quot;Hello, World!&amp;quot; program as part 
  of the documentation for the BCPL programming language developed 
  by Martin Richards. BCPL was used while C was being developed at 
  Bell Labs a few years before the publication of Kernighan and Ritchie&amp;#39;s 
  C book in 1972.

  http://stackoverflow.com/a/12785204
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets now run the command as it was meant to be:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator hello world
Hello, world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And when passing in an optional tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator hello world --upcase
HELLO, WORLD
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Multi-Thor&lt;/h2&gt;

&lt;p&gt;You can also mount Thor classes inside of other ones.  This is handy because generally you want a few top level functions that do broad sweeping things, and then many more very specific method that do fiddly things with an API that you don&amp;#39;t often use.  &lt;/p&gt;

&lt;p&gt;This is done with the &lt;code&gt;subcommand&lt;/code&gt; method.  Inside of &lt;code&gt;lib/socialinvestigator/cli.rb&lt;/code&gt; lets add the lines in the &lt;code&gt;HammerOfTheGods&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;require &amp;#39;thor&amp;#39;
require &amp;#39;socialinvestigator/cli/hn&amp;#39;

module Socialinvestigator
  class HammerOfTheGods &amp;lt; Thor
    [...]

    desc &amp;quot;hn COMMANDS&amp;quot;, &amp;quot;Hacker News Control Module&amp;quot;
    subcommand &amp;quot;hn&amp;quot;, Socialinvestigator::CLI::Hn
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now lets create that new file &lt;code&gt;lib/socialinvestigator/cli/hn.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="rb"&gt;module Socialinvestigator
  module CLI
    class Hn &amp;lt; Thor
      desc &amp;quot;search URL&amp;quot;, &amp;quot;Search hn.algolia.com for a url mentioned on Hackernews&amp;quot;
      option :tags
      def search( url )
        puts &amp;quot;Looks like you are looking for #{url} with tags #{options[:tags]}&amp;quot;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can now see what we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ bundle exec bin/socialinvestigator 
Commands:
  socialinvestigator hello NAME      # This will greet you
  socialinvestigator help [COMMAND]  # Describe available commands or one specific command
  socialinvestigator hn COMMANDS     # Hacker News Control Module

$ bundle exec bin/socialinvestigator help hn
Commands:
  socialinvestigator hn help [COMMAND]  # Describe subcommands or one specific subcommand
  socialinvestigator hn search URL      # Search hn.algolia.com for a url mentioned on Hackernews

$ bundle exec bin/socialinvestigator hn search http://google.com --tags post
Looks like you are looking for http://google.com with tags post
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h2&gt;API Interlude&lt;/h2&gt;

&lt;p&gt;I wrote a bunch more code and then &lt;em&gt;&lt;a href="https://github.com/sublimeguile/socialinvestigator"&gt;checked it in to github&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Getting the gem out there: Build, install, release&lt;/h2&gt;

&lt;p&gt;In order to install the gem, we need to build it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ rake build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a gem in the &lt;code&gt;pkg&lt;/code&gt; directory.  The version, in our case, is specified in &lt;code&gt;lib/socialinvestigator/version.rb&lt;/code&gt; and will need to bump it up everytime we push a release out.&lt;/p&gt;

&lt;p&gt;Lets install the gem locally, and see if we can access what we need ourside of the working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ rake install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes the gem located in &lt;code&gt;pkg&lt;/code&gt; and installs it as part of our local gem set.  Now we can type anywhere on our system:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh"&gt;$ socialinvestigator hn search willschenk.com/how-to-track-your-coworkers
1 Hits
How to track your coworkers – Simple passive network surveillance
  http://willschenk.com/how-to-track-your-coworkers
  40 points
  18 comments
  https://news.ycombinator.com/item?id=8541102
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets release it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake release
socialinvestigator 0.0.1 built to pkg/socialinvestigator-0.0.1.gem.
Tagged v0.0.1.
Pushed git commits and tags.
Pushed socialinvestigator 0.0.1 to rubygems.org.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command tags the repo, pushes the commits and tags onto github, and then pushes the code to rubygems.org, where it gets its &lt;a href="http://rubygems.org/gems/socialinvestigator"&gt;own shiny page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image Credit: &lt;a href="https://www.flickr.com/photos/jdhancock/4756872724/in/photolist-7E5DeZ-8fmdwY"&gt;JD Hancock&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making Yosemite Faster</title>
    <link rel="alternate" href="http://willschenk.com/making-yosemite-faster/"/>
    <id>http://willschenk.com/making-yosemite-faster/</id>
    <published>2014-11-06T19:00:00-05:00</published>
    <updated>2014-11-06T19:00:00-05:00</updated>
    <author>
      <name>Will Schenk</name>
    </author>
    <content type="html">&lt;p&gt;Since I&amp;#39;ve upgraded to Yosemite my computer has gotten slower and slower.  When it first boots up, it is it&amp;#39;s old fast self, but after a few hours everything slows down.  Remember the days when you needed to restart your computer to keep it working well?  I had forgotten, and I wasn&amp;#39;t really into remembering it.&lt;/p&gt;

&lt;p&gt;I also upgraded to &lt;a href="http://airmailapp.com"&gt;Airmail 2&lt;/a&gt;.  I get a ton of email and it used it be a lot faster than using Mail.app, but now I&amp;#39;m typing ahead of what the program can handle and it was driving me crazy. My machine is less than a year old and it&amp;#39;s basically maxed out, so its preposterous to think that it was the hardware!&lt;/p&gt;

&lt;p&gt;The only evidence I could find was that the &lt;code&gt;WindowServer&lt;/code&gt; process was taking up more CPU as time went on.  WindowServer is the part of OSX that is responsible for drawing the display.   There seems to be something wrong with it in the current build, and there&amp;#39;s something about Airmail&amp;#39;s awesomeness that is &lt;a href="https://airmail.tenderapp.com/help/discussions/airmail-beta-259/46-windowserver-40-cpu-os-x-yosemite-becomes-sluggish"&gt;exacerbating the problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are two things to do to fix this.  First go to &lt;em&gt;System Preferences &amp;gt; Accessibility&lt;/em&gt; and select &lt;em&gt;Reduce Transparency&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image" src="https://silvrback.s3.amazonaws.com/uploads/5da49df8-e23d-4236-9890-67bd040eb19e/Accessibility_large.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Transparency is most noticeable in the menu bar and window titles.  It&amp;#39;s a nice effect, but this option will go away.  This matter less than you think, because instead of staring at the pretty pictures while you are waiting switching between windows, you&amp;#39;ll just be &lt;em&gt;doing what you intended to do.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then go to &lt;em&gt;System Preferences &amp;gt; Mission Control&lt;/em&gt; and turn off &lt;em&gt;Displays have separate Spaces&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image" src="https://silvrback.s3.amazonaws.com/uploads/6cec93bc-e6e9-43dd-ad35-6216a3519ff4/Mission_Control_large.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll need to logout and log back in for the changes to take effect.  If you have an external monitor plugged in this will make it into more of a mirrored effect.  But it&amp;#39;s less memory for the WindowServer to have to deal with but frankly, for this build, it seems like the WindowServer is in over its head.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image source: &lt;a href="https://www.flickr.com/photos/enfocalafoca/10281990664/in/photolist-bemZsr-eTiVKj-7mHDny-9Dy4ax-oCTxUN-6ADKkQ-gEzTB7-9JVCCh-9VBzew-e6drjv-81i16E-dZELmS-9W3aAW-fxk247-bUjtvd-5B9RWQ-haJUc-7PGVs-2bhCy-hiECct-9TdDF5-dxPUZS-k4Cqht-Eybma-dfUT1w-nHgvih-fimRJN-kgE-eTifLY-koWW78-9Mi2sf-fCy2Gj-oR5RdZ-aivjjh-YKHt3-nSa2xB-9KrnK7-j3hzch-7Ry3aQ-Be2KQ-7uyD2-aqbv5m-84hTGU-88gVVn-7yf7Ao-nYeUkp-du6QC8-duy9pH-dGMeu2-2ve91"&gt;Jose Hidalgo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Field of Dreams is 25 years old and hasn't aged well</title>
    <link rel="alternate" href="http://willschenk.com/field-of-dreams-is-25-years-old-and-hasn-t-aged-well/"/>
    <id>http://willschenk.com/field-of-dreams-is-25-years-old-and-hasn-t-aged-well/</id>
    <published>2014-11-04T19:00:00-05:00</published>
    <updated>2014-11-04T19:00:00-05:00</updated>
    <author>
      <name>Will Schenk</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="left_float" src="https://silvrback.s3.amazonaws.com/uploads/bc10cbd1-d757-421f-b069-699e2c82911e/fod_medium.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure you all remember the movie.  A man whose normal life is starting to fall apart.  He&amp;#39;s got the wife, family, mortgage and it&amp;#39;s both not enough and slipping away.  He needs to do something, something to make him feel alive.  And since it was that era of Hollywood film making, he&amp;#39;s also got plenty of daddy issues he&amp;#39;s working through.  He becomes seized by a vision, caught in the grip of an &lt;em&gt;idée fixe&lt;/em&gt; that he needs to go build something that everyone around him thinks is preposterous.&lt;/p&gt;

&lt;p&gt;The movie&amp;#39;s tagline is: &lt;em&gt;If you believe the impossible, the incredible can come true.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And so he takes a chunk of his farm, and turns it into a baseball diamond for a team that doesn&amp;#39;t exist, probably is a delusion brought on by stress and desperation, and that no one is asking to see.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t seen this movie in a while and have fuzzy nostalgic memories of seeing it as a kid, I&amp;#39;d hold off on seeing it again to rekindle the childhood magic.  The movie, as a movie, doesn&amp;#39;t really hold up well and unless you are interested in the late 80s from a cultural anthropology perspective, don&amp;#39;t ruin the memory.  (Unlike, say &lt;em&gt;Bull Durham&lt;/em&gt; or  &lt;em&gt;The Princess Bride&lt;/em&gt;, which are actually as good as you remember.)&lt;/p&gt;

&lt;p&gt;There&amp;#39;s one thing that everyone remembers about this movie.  If there&amp;#39;s a reason why I still had fond memories of this movie, it was the signature quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you build it, he will come.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the face of the odds, clearly stacked against you, this phrase captured the emotional experience of &lt;em&gt;keeping the faith&lt;/em&gt; while doing something that wasn&amp;#39;t working and no one around was supporting.  In that moment of pushing ahead to follow a dream that &lt;em&gt;you can see so clearly&lt;/em&gt;, and even your loved ones &lt;em&gt;don&amp;#39;t really get it&lt;/em&gt;, what keeps you going?&lt;/p&gt;

&lt;p&gt;The answer is &lt;strong&gt;courage&lt;/strong&gt;.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scientific progress is measured in units of courage, not intelligence.
&lt;em&gt;Paul Dirac&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to move forward, to make progress in spite of everything, for you to take you vision to the world, you need to be able to find something deep inside of yourself to keep going.  Before things get better there are some dark times.  Paul Graham calls it the &lt;em&gt;Trough of Sorrow&lt;/em&gt;.  Figuring out how to navigate that emotional experience when you have doubts and are constantly second guessing yourself is major part of being an entrepreneur.&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Yeah, but what about that baseball field in the middle of a corn field?&lt;/h2&gt;

&lt;p&gt;Maybe the whole world thinks you are crazy.  Or delusional.  Maybe no one seems to know what you are talking about.  You have a vision, and if you stick to it, if you actually do build the thing, maybe then all of the doubters, the critics who point out of the doer of deeds could have done it better, don&amp;#39;t matter.  Hell, I still think that a 140-character &amp;quot;microblogging platform&amp;quot; makes no sense.  That didn&amp;#39;t stop them, and they built it, and people came.&lt;/p&gt;

&lt;p&gt;People take the wrong moral from this story.  The problem isn&amp;#39;t that people don&amp;#39;t actually persevere in the face of the odds, though that is difficult, is that people don&amp;#39;t have a way to hone in on a good idea.  Or to jump start people using it.  The Twitter folks started out in podcasting, and ended up in, well, whatever Twitter is.&lt;/p&gt;

&lt;p&gt;And check it: using up part of your capital building a baseball diamond for your imaginary friends is actually &lt;em&gt;really stupid&lt;/em&gt;.  Everyone told him that it was a bad idea, they weren&amp;#39;t merely perplexed, they actually tried their damnest to get his attention to save him from his folly.  &lt;em&gt;If you build it, he will come&lt;/em&gt; is magically inspirational, but magical thinking nonetheless.&lt;/p&gt;

&lt;p&gt;This is a myth that people believe.  In the start up world, it shows up in thoughts like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it just had one more feature, then it would work.&lt;/li&gt;
&lt;li&gt;The reason that we don&amp;#39;t have traction is because of a corner-case bug.&lt;/li&gt;
&lt;li&gt;It&amp;#39;s not that no one cares, is that it wasn&amp;#39;t built right.&lt;/li&gt;
&lt;li&gt;We&amp;#39;ll engineer our way out of this marketing and distribution problem.&lt;/li&gt;
&lt;li&gt;It&amp;#39;s &lt;em&gt;merely marketing&lt;/em&gt; and once it&amp;#39;s built we expect an overnight success.&lt;/li&gt;
&lt;li&gt;Sales is something for &lt;em&gt;suits&lt;/em&gt;, we&amp;#39;re doing the real work over here.&lt;/li&gt;
&lt;li&gt;(Sales snobbery in general.)&lt;/li&gt;
&lt;li&gt;Everything needs to be perfect, every bug is critical, and they need to be fixed all at once.&lt;/li&gt;
&lt;li&gt;It &lt;em&gt;does&lt;/em&gt; make sense, the entire world is actually wrong, it&amp;#39;s time to double down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, &lt;em&gt;if you believe the impossible, you have a problem.&lt;/em&gt;  You probably aren&amp;#39;t a misunderstood Artiste or the next Steve Jobs.  The answer is &lt;em&gt;it simply doesn&amp;#39;t make sense&lt;/em&gt;.  Maybe it&amp;#39;s dumb, or maybe it&amp;#39;s ahead of it&amp;#39;s time.  After all, while Twitter may have abandoned podcasting, &lt;a href="http://nymag.com/daily/intelligencer/2014/10/whats-behind-the-great-podcast-renaissance.html"&gt;podcasting is now all the rage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a dark side to this courage-in-the-face-of-adversity.  It&amp;#39;s part of being in the grip of an &lt;em&gt;idée fixe&lt;/em&gt;, where you only hear what you want to hear and filter out everything that is in any way threatening.&lt;/p&gt;

&lt;h2&gt;Does the world need your idea?&lt;/h2&gt;

&lt;p&gt;You should sit down with your &lt;em&gt;idée fixe&lt;/em&gt; and have a long talk.  What are you actually trying to do with your life?  Do you really have a problem that&amp;#39;s worth solving?  Are you actually trying to do anything worth doing?&lt;/p&gt;

&lt;p&gt;A lot of aspiring entrepreneurs fall in love with their idea and it hurts them when they need to make a business.  We say that they fall in love with the product, and don&amp;#39;t understand what it means to start a business.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build a better mouse trap, and the world will beat a path to your door.
&lt;em&gt;not Ralph Waldo Emerson, who is actually awesome but has this dumb-ass platitude associated with his name&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea is important, a necessary but not sufficient component of a successful enterprise.  How does the idea fit in to the rest of the world?  What is it that people actually would like?  How would they ever even find out about it, really?  If it&amp;#39;s not what people want, or not what they need, well, maybe your idea has a happier existence as a very elaborate day-dream.  Before you spin up the manufacturing plant, you should check in with some mice before running with that platitude:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So with all of these people trying to invent a better mousetrap, the dirty secret of trapping mice is mice are really easy to catch. That&amp;#39;s why every inventor thinks that he can do it. Catching a mouse is basically playing against a casino where you always win.
 [...]
The regular, old-fashioned, cheap, little mousetrap, Andy says, will usually catch the mouse in 24 to 48 hours. It will kill it 88% of the time. Other traps that aren&amp;#39;t much more expensive have 100% lethality. Mice are easy to kill because mice, unlike rats, are incredibly inquisitive animals.
[...]
So the problem for the mousetrap inventor is the world doesn&amp;#39;t need a better mousetrap. You know that old saying, &amp;quot;Build a better mousetrap and the world will beat its way to your door?&amp;quot; Not true. Andy makes a traditional mousetrap that sells two for $0.99. It does the job just fine. But most inventors never understand this.
&lt;em&gt;Ira Glass, &lt;a href="http://www.thisamericanlife.org/radio-archives/episode/366/transcript"&gt;This America Life #366&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h1&gt;The Long Game, not the Long Con&lt;/h1&gt;

&lt;p&gt;As an aside, I&amp;#39;m not really sure that I&amp;#39;m smart enough to read Ralph Waldo Emerson, at least the real thing and not the &amp;quot;well known quotes&amp;quot;. It&amp;#39;s all too damn subtle and I find myself drifting off.  So many rhythmic sentences that just go on and on, and on, and so on.  Nietzsche I&amp;#39;m fascinated by, and I&amp;#39;ve read most of his books multiple times.  Those I can follow.  I find something new in them every time.  In the beginning of his writing, it&amp;#39;s clear that Emerson&amp;#39;s essays blew Nietzsche&amp;#39;s socks off.  He kept his ragged, annotated, school issued copy of the essays with him throughout his life.  Based on this alone I&amp;#39;m sure good old &lt;em&gt;Waldo&lt;/em&gt; deserves his place in the pantheon but in this go-go-go world I just can&amp;#39;t get a grasp on it.&lt;/p&gt;

&lt;p&gt;The actual Emerson quote that the mousetrap thing started our as is: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If a man has good corn or wood, or boards, or pigs, to sell, or can make better chairs or knives, crucibles or church organs, than anybody else, you will find a broad hard-beaten road to his house, though it be in the woods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such poetry!  Such rhythm!  Such circumlocution!  Yes yes, totally!  Not precisely sure what I can take from Emerson here, as like &lt;em&gt;an action item&lt;/em&gt;, but I&amp;#39;m certainly jazzed up about it!  Just like &lt;em&gt;If you build it, he will come.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Compare this nineteenth century poetry to our modern Paul Graham&amp;#39;s &lt;a href="http://paulgraham.com/good.html"&gt;&lt;em&gt;Build something people want.&lt;/em&gt;&lt;/a&gt; It&amp;#39;s not like they are saying anything different (though it&amp;#39;s certainly said differently) but one has these emotional overtones that strike a chord right when things are the bleakest.  When confronted between the dream and the reality, stuck spinning somewhere between the dream and the soul crushing contingency of the market, how do you move forward?&lt;/p&gt;

&lt;p&gt;Sometimes the problem is the bleakness, where you need to hold on to something for psychological reasons.  Sometimes the problem is bullheaded stupidity, a type of hubris where you stubbornly cling to a mistaken belief about how the world works.  And in the later cases, using the emotional techniques to keep going is actually hurting you.&lt;/p&gt;

&lt;p&gt;Because your emotions are probably not wrong.  They are there for a reason.  They&amp;#39;ve been honed by a jillion years of evolution (or instilled by a benevolent creator; the net is the same) and if there&amp;#39;s something wrong on a gut level you should take a cold hard look at what it is that you are doing.  If you&amp;#39;re building something as a get rich quick scheme, because you have some sort of &lt;em&gt;angle&lt;/em&gt; any change of the situation will topple the whole scheme.  A fundamental trait of an Entrepreneur is to look at the world and see in it&amp;#39;s problems an opportunity, and while that has an element of being bold and self-confident enough to say &amp;quot;I can do this better&amp;quot;, it&amp;#39;s not a &lt;em&gt;uber-menchean&lt;/em&gt; dismissal of everyone else.  It&amp;#39;s better to be clear on your vision and be able to adapt to feedback.&lt;/p&gt;

&lt;p&gt;This is what a lot of startups struggle with.  On the one hand, you need to start with a clear idea and vision of what you want to do.  On the other hand, you need to start small, see what works, try things out and &lt;em&gt;be able to change your mind as you know more&lt;/em&gt;.  But how can you change your mind enough to make it work while also having enough consistency of purpose to make it work?&lt;/p&gt;

&lt;iframe width="100%" style="max-width: 560px" height="315" src="//www.youtube.com/embed/APx2yFA0-B4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;em&gt;Honestly, I just wanted an excuse to embed this video&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;I don&amp;#39;t know the answer&lt;/h2&gt;

&lt;p&gt;And I don&amp;#39;t think that Field of Dreams has it either.  And blindly absorbing the myth of &lt;em&gt;if you build it, he will come&lt;/em&gt; is overly simplistic and only works in heart-warming sports memoirs.  Which is too bad because James Earl Jones was great in it, and it was some vintage Kevin Costner.&lt;/p&gt;

&lt;p&gt;Still, there&amp;#39;s always Iowa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;John Kinsella: Is this heaven?
Ray Kinsella: It&amp;#39;s Iowa.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt="Silvrback blog image" src="https://silvrback.s3.amazonaws.com/uploads/cc64ea20-716c-4238-a3bf-ca06177d0971/6010329940_c7d0b24dd9_b_large.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;(Image source: &lt;a href="https://www.flickr.com/photos/54159370@N08/6010329940/in/photolist-aa7vGh-5YUB2z-8i5gyw-8XdesP-4r2QNd-tzwz2-2u3Zn-9tVv1A-gT25Tz-b6ixTD-746UmW-aP33La-5WkwXU-4NEa39-6iGa2w-oxpiPX-9cYvE8-hUcRsF-3Wgmz-bzLcHH-a8h1SU-nT93SB-cdmedf-hT1Xgc-9d2BsG-8u5mxh-8DCzJo-47nSFq-fs6j6i-dXvgqN-b43D94-fQoepV-7fADo-nrE8uT-8sABRF-8rG36o-aE7KjU-hUe2it-hjinhV-6umECH-oJfujc-cpMtrS-i7WL3d-aE7pVu-pyZLUw-7AzhL7-9992tA-nf2TZx-32can-8rnGgp"&gt;keeve99a&lt;/a&gt; )&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Footnotes&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I originally thought that the Paul Dirac quote was from Richard Hamming, whose talk &lt;a href="http://www.paulgraham.com/hamming.html"&gt;You and Your Research&lt;/a&gt; has really stuck with me since I first read it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here&amp;#39;s a whole journal exploring the &lt;a href="http://libarts.wsu.edu/english/Journals/ESQ/emersonandnietzche.html"&gt;influence of Emerson on Nietzsche&lt;/a&gt;, which has nothing to do with startups, but is interesting anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
</feed>
